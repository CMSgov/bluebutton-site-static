pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "ops/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    AKAMAI_SCP_SSH_KEY = credentials("bb2-akamai-scp-ssh-key")
    AKAMAI_SSH_USER = credentials("bb2-akamai-ssh-user")
  }

  parameters {
    choice(
      name: "SITE_ENV",
      choices: ["test", "staging"],
      description: "The environment to build and deploy to."
    )

    string(
      name: "CSS_REPO_BRANCH",
      defaultValue: "master",
      description: "The branch of the CSS repo to deploy. Defaults to master."
    )
  }

  stages {
    stage("Notify Slack") {
      steps {
        script {
          helpers = load "ops/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.SITE_ENV}"
        }
      }
    }

    stage("Display Environment") {
      steps {
        script {
          echo("SITE_ENV is set to ${params.SITE_ENV}, proceeding.")
        }
      }
    }

    stage("Determine Akamai NetStorage path") {
      steps {
        script {
          echo "Setting UPLOAD_LOCATION from SITE_ENV"
          if (params.SITE_ENV == "test") {
            UPLOAD_LOCATION = "/1197010/test.static.bluebutton.cms.gov/"
          } else if (params.SITE_ENV == "staging") {
            UPLOAD_LOCATION = "/1197010/staging.bluebutton.cms.gov/"
          } else {
            error("Please set SITE_ENV to one of: [test, staging]")
          }
        }
      }
    }

    stage("Run Bundle Install") {
      steps {
        sh """
        bundle install
        """
      }
    }

    stage("Run Jekyll Build") {
      steps {
        sh """
        bundle exec jekyll build --config _config.yml,_config-${params.SITE_ENV}.yml
        """
      }
    }

    stage("Deploy Static Site to Akamai NetStorage (rsync)") {
      steps {
        sh """
        rsync -av -e "ssh -oHostKeyAlgorithms=+ssh-dss -oStrictHostKeyChecking=no -i ${AKAMAI_SCP_SSH_KEY}" ./_site/ ${AKAMAI_SSH_USER}@bluebuttoncms.rsync.upload.akamai.com:${UPLOAD_LOCATION} --delete
        """
      }
    }

    stage("Verify Akamai NetStorage Upload") {
      steps {
        sh """
        # Create an SFTP batch file to run 'ls' on the target directory
        echo "cd ${UPLOAD_LOCATION}/fhir/CodeSystem" > sftp_batch.txt
        echo "ls -lah" >> sftp_batch.txt

        # Connect to Akamai NetStorage and run the batch commands
        sftp -oHostKeyAlgorithms=+ssh-dss -oStrictHostKeyChecking=no -i ${AKAMAI_SCP_SSH_KEY} ${AKAMAI_SSH_USER}@bluebuttoncms.rsync.upload.akamai.com < sftp_batch.txt

        # Clean up
        rm sftp_batch.txt
        # Check if 'somefile' is listed
        #grep 'BENE-BUYIN-CD' sftp_output.txt
        """
      }
    }

    stage("Checkout CSS Repo") {
      steps {
        checkout([
            $class: "GitSCM",
            branches: [[name: "${params.CSS_REPO_BRANCH}"]],
            userRemoteConfigs: [[url: "https://github.com/CMSgov/bluebutton-css.git"]]
        ])
      }
    }

    stage("Deploy CSS to Akamai NetStorage (rsync)") {
      steps {
        sh """
        rsync -av -e "ssh -oHostKeyAlgorithms=+ssh-dss -oStrictHostKeyChecking=no -i ${AKAMAI_SCP_SSH_KEY}" ./dist/static-main.css ${AKAMAI_SSH_USER}@bluebuttoncms.rsync.upload.akamai.com:${UPLOAD_LOCATION}assets/css/
        """
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS - ENV:${params.SITE_ENV}", "good")
      }
    }

    failure {
      script {
        helpers.slackNotify("FAILURE - ENV:${params.SITE_ENV}", "bad")
      }
    }
  }
}