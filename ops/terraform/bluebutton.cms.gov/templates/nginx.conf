user nginx nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections 4096;
}

http {
  server {
    listen 80;
    server_name _;
    server_tokens off;

    # redirect original non-HTTPS req to HTTPS
    #if ($http_x_forwarded_proto != "https") {
    #  rewrite ^(.*)$ https://$http_host$1 permanent;
    #}

    # enforce HSTS policy (force clients to use HTTPS)
    #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    # This RESOLVER marker is replaced by user_data script
    resolver |RESOLVER| valid=300s;
    resolver_timeout 5s;

    merge_slashes off;
    error_page 404 = @404;

    location @404 {
      set $s3_host 's3.amazonaws.com';
      set $bucket_name '${bucket_name}';
      rewrite ^(.*)$ /$bucket_name/404.html break;
      proxy_pass https://$s3_host;
    }

    location / {
      set $s3_host 's3.amazonaws.com';
      set $bucket_name '${bucket_name}';

      proxy_http_version 1.1;
      proxy_set_header       Connection "";
      proxy_set_header       Authorization '';
      proxy_set_header       Host $s3_host;
      proxy_set_header       X-Real-IP $remote_addr;
      proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header       X-Forwarded-Proto $scheme;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      x-amz-meta-server-side-encryption;
      proxy_hide_header      x-amz-server-side-encryption;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   Set-Cookie;
      proxy_buffering        off;
      proxy_intercept_errors on;

      # Add trailing slash to paths
      rewrite ^([^.]*[^/])$ $scheme://$http_host$1/ permanent;

      # Rewrite root / to /index.html
      rewrite ^/$ /$bucket_name/index.html break;
      rewrite ^$ /$bucket_name/index.html break;

      # Rewrite URLs that don't contain '.' and end in '/' to '/index.html'
      rewrite ^([^.])/$ /$bucket_name/$1/index.html break;

      # Rewrite everything to /$bucket_name
      rewrite ^(.*)$ /$bucket_name$1 break;

      # Proxy to $s3_host
      proxy_pass https://$s3_host;
    }
  }
}
