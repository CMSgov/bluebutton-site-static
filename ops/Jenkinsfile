#!groovy
def aws_creds = 'cbj-deploy'

pipeline {
  agent any

  parameters {
    string(
      name: 'Static_GIT_VERSION',
      defaultValue: '*/master',
      description: 'The branch, tag or commit to deploy.'
    )
    string(
      name: 'CSS_GIT_VERSION',
      defaultValue: '*/master',
      description: 'The branch, tag or commit to deploy.'
    )
    booleanParam(
      defaultValue: false,
      description: 'When true, deploy to both TEST and PROD environments.',
      name: 'DEPLOY_PROD'
    )
  }

  stages {
    stage('Notify HipChat') {
      steps {
        withCredentials([
          string(credentialsId: 'hipchat-room', variable: 'room'),
          string(credentialsId: 'hipchat-server', variable: 'server'),
          string(credentialsId: 'hipchat-token', variable: 'token')
        ]) {
          hipchatSend(
            color: 'GRAY',
            notify: true,
            message: "STARTED: ${env.JOB_NAME} [prod: ${params.DEPLOY_PROD}]",
            room: room,
            sendAs: '',
            server: server,
            token: token,
            v2enabled: true
          )
        }
      }
    }

    stage('Clear') {
      steps {
        deleteDir()
      }
    }

    stage('Checkout Static Site') {
      steps {
        checkout([
            $class: 'GitSCM',
            branches: [[name: "${params.Static_GIT_VERSION}"]],
            userRemoteConfigs: [[
              url: 'https://github.com/CMSgov/bluebutton-site-static.git'
            ]]
        ])
      }
    }

    stage('Install') {
      steps {
        sh '''
          rbenv install 2.4.5
          rbenv local 2.4.5
          gem install  --no-ri --no-rdoc bundler
          bundle install
          '''
      }
    }

    stage('Build') {
      steps {
        parallel (
          "build test": {
            script {
              def site_folder = "_site-test"
              sh """
                bundle exec jekyll build --config _config.yml,_config-test.yml -d ./${site_folder}
              """
            }
          },
          "build prod": {
            script {
              def site_folder = "_site"
              sh """
                bundle exec jekyll build --config _config.yml,_config-prod.yml -d ./${site_folder}
              """
            }
          }
        )
      }
    }

    stage('Checkout CSS') {
      steps {
        checkout([
            $class: 'GitSCM',
            branches: [[name: "${params.CSS_GIT_VERSION}"]],
            userRemoteConfigs: [[
              url: 'https://github.com/CMSgov/bluebutton-css.git'
            ]]
        ])
      }
    }

    stage('Deploy Static to TEST') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 sync --delete ./_site-test/ s3://test.bluebutton.cms.gov
          """
        }
      }
    }

    stage('Deploy CSS To TEST') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 cp ./dist/static-main.css s3://test.bluebutton.cms.gov/assets/css/
          """
        }
      }
    }

    stage('Deploy Static to PROD') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 sync --delete ./_site/ s3://bluebutton.cms.gov
          """
        }
      }
      when {
        expression {
          params.DEPLOY_PROD == true
        }
      }
    }

    stage('Deploy CSS To PROD') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 cp ./dist/static-main.css s3://bluebutton.cms.gov/assets/css/
          """
        }
      }
      when {
        expression {
          params.DEPLOY_PROD == true
        }
      }
    }
  }


  post {
    success {
      withCredentials([
        string(credentialsId: 'hipchat-room', variable: 'room'),
        string(credentialsId: 'hipchat-server', variable: 'server'),
        string(credentialsId: 'hipchat-token', variable: 'token')
      ]) {
        hipchatSend(
            color: 'GREEN',
            notify: true,
            message: "SUCCESS: ${env.JOB_NAME} [prod: ${params.DEPLOY_PROD}]",
            room: room,
            sendAs: '',
            server: server,
            token: token,
            v2enabled: true
        )
      }
    }

    failure {
      withCredentials([
        string(credentialsId: 'hipchat-room', variable: 'room'),
        string(credentialsId: 'hipchat-server', variable: 'server'),
        string(credentialsId: 'hipchat-token', variable: 'token')
      ]) {
        hipchatSend(
          color: 'RED',
          notify: true,
          message: "FAILED: ${env.JOB_NAME} [prod: ${params.DEPLOY_PROD}]",
          room: room,
          sendAs: '',
          server: server,
          token: token,
          v2enabled: true
        )
      }
    }
  }
}
