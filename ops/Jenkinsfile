#!groovy
def aws_creds = 'cbj-deploy'

pipeline {
  agent any

  parameters {
    string(
      name: 'Static_GIT_VERSION',
      defaultValue: '*/master',
      description: 'The branch, tag or commit to deploy.'
    )
    string(
      name: 'CSS_GIT_VERSION',
      defaultValue: '*/master',
      description: 'The branch, tag or commit to deploy.'
    )
    booleanParam(
      defaultValue: true,
      description: 'When true, deploy to both TEST and STAGING environments.',
      name: 'DEPLOY_TEST'
    )
    booleanParam(
      defaultValue: false,
      description: 'When true, deploy to both TEST and STAGING environments.',
      name: 'DEPLOY_STAGING'
    )
    booleanParam(
      defaultValue: false,
      description: 'When true, deploy to PROD environments.',
      name: 'DEPLOY_PROD'
    )
  }

  stages {
    stage('Notify') {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING"
        }
      }
    }

    stage('Clear') {
      steps {
        deleteDir()
      }
    }

    stage('Checkout Static Site') {
      steps {
        checkout([
            $class: 'GitSCM',
            branches: [[name: "${params.Static_GIT_VERSION}"]],
            userRemoteConfigs: [[
              url: 'https://github.com/CMSgov/bluebutton-site-static.git'
            ]]
        ])
      }
    }

    stage('Install') {
      steps {
        sh '''
          if ! rbenv versions | grep -qw 2.4.5; then
          rbenv install 2.4.5
          fi
          rbenv local 2.4.5
          gem install  --no-ri --no-rdoc bundler
          bundle install
          '''
      }
    }

    stage('Build TEST') {
      when {
        expression {
          params.DEPLOY_TEST == true
        }
      }
      steps {
        echo 'Building TEST'
        script {
          def site_folder = "_site-test"
          sh """
            bundle exec jekyll build --config _config.yml,_config-test.yml -d ./${site_folder}
          """
        }
      }
    }

    stage('Build STAGING') {
      when {
        expression {
          params.DEPLOY_STAGING == true
        }
      }
      steps {
        echo 'Building STAGING'
        script {
          def site_folder = "_site-staging"
          sh """
            bundle exec jekyll build --config _config.yml,_config-staging.yml -d ./${site_folder}
          """
        }
      }
    }

    stage('Build PROD') {
      when {
        expression {
          params.DEPLOY_PROD == true
        }
      }
      steps {
        echo 'Building PROD'
        script {
          def site_folder = "_site-prod"
          sh """
            bundle exec jekyll build --config _config.yml,_config-prod.yml -d ./${site_folder}
          """
        }
      }
    }

    stage('Checkout CSS') {
      steps {
        checkout([
            $class: 'GitSCM',
            branches: [[name: "${params.CSS_GIT_VERSION}"]],
            userRemoteConfigs: [[
              url: 'https://github.com/CMSgov/bluebutton-css.git'
            ]]
        ])
      }
    }

    stage('Deploy Static to TEST') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 sync --delete ./_site-test/ s3://test.bluebutton.cms.gov
          """
        }
      }
      when {
        expression {
          params.DEPLOY_TEST == true
        }
      }
    }

    stage('Deploy CSS To TEST') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 cp ./dist/static-main.css s3://test.bluebutton.cms.gov/assets/css/
          """
        }
      }
      when {
        expression {
          params.DEPLOY_TEST == true
        }
      }
    }

    stage('Deploy Static to STAGING') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 sync --delete ./_site-staging/ s3://staging.bluebutton.cms.gov
          """
        }
      }
      when {
        expression {
          params.DEPLOY_STAGING == true
        }
      }
    }

    stage('Deploy CSS To STAGING') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 cp ./dist/static-main.css s3://staging.bluebutton.cms.gov/assets/css/
          """
        }
      }
      when {
        expression {
          params.DEPLOY_STAGING == true
        }
      }
    }

    stage('Deploy Static to PROD') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 sync --delete ./_site-prod/ s3://bluebutton.cms.gov
          """
        }
      }
      when {
        expression {
          params.DEPLOY_PROD == true
        }
      }
    }

    stage('Deploy CSS To PROD') {
      steps {
        withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
          sh """
            aws s3 cp ./dist/static-main.css s3://bluebutton.cms.gov/assets/css/
          """
        }
      }
      when {
        expression {
          params.DEPLOY_PROD == true
        }
      }
    }
  }


  post {
      success {
        script {
          helpers.slackNotify("SUCESS", 'good')
        }
      }

      failure {
        script {
          try {
            helpers.slackNotify("FAILED!", 'bad')
          } catch (err) {
            emailext body: "A CBJ job failed and we couldn't notify Slack.\n${BUILD_URL}", subject: 'CBJ Build Failure', to: 'bluebutton-dev-alert@fearsol.com'
          }
        }
      }

      always {
        // Cleanup the workspace
        deleteDir()
      }
  }
}
