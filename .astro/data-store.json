[["Map",1,2,9,10,49,50,20,107,206,207],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.5","content-config-digest","1dbc697482cde8a0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://bluebutton.cms.gov\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","pages",["Map",11,12,20,21,28,29,35,36,42,43],"api-documentation",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"deferredRender":19},{"title":14,"description":15},"API Documentation","","Blue Button 2.0 (BCDA) uses [Fast Healthcare Interoperability Resources (FHIR)](https://hl7.org/fhir/R4/overview.html) to share claims data. You can use a variety of tools or client software programs to access the sandbox and production environments.\n\n## Getting started\n\n\u003CProcessList>\n  \u003CProcessListItem heading=\"Learn about BB2\">\n      This is placeholder text. Explore the [documentation](), [Data Dictionary](), and [sample files]().\n  \u003C/ProcessListItem>\n  \u003CProcessListItem heading=\"Use the sandbox\">\n      This is placeholder text. The sandbox environment allows anyone to try the API and download test claims data. Learn how to [get authorized]() and [access the sandbox]().  \n  \u003C/ProcessListItem>\n  \u003CProcessListItem class=\"docs-final-item\" heading=\"Get production access\">\n      This is placeholder text. You must have [production credentials]() to access enrollees' claims data. \n  \u003C/ProcessListItem>\n\u003C/ProcessList>\n\n\nBlue Button 2.0 (BB2.0) API enables software developers to build trusted applications, services, and research programs that benefit Medicare enrollees. As a [standards-based API](#technical-specifications-and-standards), BB2.0 provides claims data for more than 64 million people with Medicare.\n\nBB2.0 API includes more than 20 billion Medicare Part A, B and D claims going back to 2014.\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">Definitions of Part A, B, and D claims data\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Data type\u003C/th>\n      \u003Cth scope=\"col\">Definition\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Cth scope=\"row\">Medicare Part A claims data\u003C/th>\n      \u003Ctd>\n        Inpatient hospital stays, care in skilled nursing facilities, and hospice care\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth scope=\"row\">Medicare Part B claims data\u003C/th>\n      \u003Ctd>\n        Doctors' services, outpatient care, preventive services, and durable medical equipment (DME)\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth scope=\"row\">Medicare Part D claims data\u003C/th>\n      \u003Ctd>\n         Prescription drugs prescribed by healthcare providers\n      \u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\nNote: Blue Button 2.0 API does not provide Medicare Part C claims (Medicare Advantage). However, if a Medicare Advantage enrollee has a Part D plan, the API includes those claims.\n\n## Access to Medicare enrollee data\n\n### Scope of access\n\nApplications receive permission to access Medicare enrollee data on a per-user basis. Access to claims data for each individual enrollee begins after they grant access to an application via the BB2.0 API's authorization flow. \n\nMedicare enrollees may always opt to omit personal data such as name, date of birth, race, and sex when granting access to claims data. An enrollee's choice during the BB2.0 authorization flow determines the [scope](#scopes) of access an application will have to their data. \n\n### Duration of access\n\nThe length of time that an application can continue to pull new claims data from Medicare depends on the application's use case and category. The BB2.0 API team determines your application's access duration category during the [production access process](/guide/). \n\nThere are 3 categories for data access duration:\n\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">Categories for data access duration\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Category\u003C/th>\n      \u003Cth scope=\"col\">Description and Notes\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Cth scope=\"row\">10 hours\u003C/th>\n      \u003Ctd>\n        One-time use apps (Example: An app that pulls an enrollee’s data once to recommend insurance plans)\n        \u003Cul>\n          \u003Cli>These apps do not usually require separate logins or store users’ data over time.\u003C/li>\n          \u003Cli>Authorization will be granted for 10 hours, without the ability to refresh the token.\u003C/li>\n          \u003Cli>If an enrollee uses the app more than once outside the 10-hour window, they must reauthorize for each data pull.\u003C/li>\n        \u003C/ul>\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth scope=\"row\">13 months\u003C/th>\n      \u003Ctd>\n        Apps that pull data for the enrollee’s use on an ongoing basis (Example: A personal health aggregator app.) \n        \u003Cul>\n          \u003Cli>Authorization will be granted for 13 months.\u003C/li>\n          \u003Cli>For continued access after 13 months, an app must prompt the user to reauthorize.\u003C/li>\n        \u003C/ul>\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth scope=\"row\">Research\u003C/th>\n      \u003Ctd>\n        Apps that facilitate Institutional Review Board (IRB)-approved clinical research studies \n        \u003Cul>\n          \u003Cli>Access to an enrollee’s data will never expire unless revoked by the enrollee or by the BB2.0 team due to app inactivity over a period of time.\u003C/li>\n          \u003Cli>Research apps will be reviewed every 2 years to ensure that they are still active.\u003C/li>\n          \u003Cli>If a research app is not active at a 2-year check-in, we will contact the app team for confirmation that they still need BB2.0 API access.\u003C/li>\n          \u003Cli>If you have a research app, please keep us updated on changes to your contact information and watch for emails from BlueButtonAPI@cms.hhs.gov.\u003C/li>\n        \u003C/ul>\n      \u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n## Technical Specifications and Standards \n\nThe Blue Button 2.0 API is a RESTful API, based on the HL7 FHIR standard and the CARIN Consumer Directed Payer Data Exchange Implementation Guide. It supplies data in JSON format, and uses the OAuth 2.0 protocol for authorization.\n\n* [HL7 FHIR Standard](http://www.hl7.org/fhir/index.html)\n* [CARIN Consumer Directed Payer Data Exchange Implementation Guide](http://www.hl7.org/fhir/us/carin-bb/index.html)\n* [OAuth 2.0 protocol](https://oauth.net/)\n* [RESTful API Overview](https://restfulapi.net/)\n\n## Versions\n\nWe currently support 2 BB2.0 API versions:\n\n### Version 2 \n\nBB2.0 Version 2 (V2) is based on [FHIR release (R4)](http://hl7.org/fhir/R4/) and the [CARIN CDPDE Implementation Guide (Carin for Blue Button)](http://hl7.org/fhir/us/carin-bb/STU1.1/) and was released in July 2021\\. To learn about migrating to BB2.0 V2, go to [Migrating to V2 FAQ](https://github.com/CMSgov/beneficiary-fhir-data/wiki/Migrating-to-V2-FAQ)\n\n### Version 1 \n\nVersion 1 (V1) is the original Blue Button API, based on [FHIR release 3 (STU3)](http://hl7.org/fhir/STU3/). Development on V1 is limited to bug fixes and basic maintenance. If you're developing a new app, use V2\\. For information about BB2.0 V1, see the [V1 Documentation](/v1/). \n\n## Environments\n\nWe currently maintain production and sandbox environments for developing with the BB2.0 API. For technical information about our environments, see [Base FHIR URLs](#base-fhir-urls). \n\n### Sandbox\n\nDevelop your application using our sandbox environment. It provides access to synthetic Medicare enrollee data and includes all the same endpoints, resource types, and parameters as production. You can complete all of the same operations in the sandbox as in the production environment.\n\nIt's helpful to know that:\n\n* Sandbox credentials will not work in production. \n* While we strive to provide a synthetic data set relevant to most use cases, our synthetic data set is not as comprehensive as production data.\n\nTo get started in the developer sandbox, [create an account](https://sandbox.bluebutton.cms.gov/v2/accounts/mfa/login).\n\n### Production\n\nOnce your development is nearing completion, get access to live data in our production environment by following the instructions in our [production access user guide](/guide/). After you complete the requirements in the production access guide and your app is approved, we'll give you credentials for the production environment.","src/content/pages/api-documentation.mdx","bc8d1a439e10062c",true,"resources",{"id":20,"data":22,"body":25,"filePath":26,"digest":27,"deferredRender":19},{"title":23,"description":24},"Blue Button 2.0 Resources","Resources and sample applications for the Blue Button 2.0 API.","## Sample Applications\nUse our sample applications to see examples of basic use of the API.\n* [Node & React](https://github.com/CMSgov/bluebutton-sample-client-nodejs-react)\n* [Python & React](https://github.com/CMSgov/bluebutton-sample-client-python-react)\n\n## SDKs\nOur Node and Python SDKs provide methods for building API calls and managing token refreshes.\n* [Node SDK](https://www.npmjs.com/package/cms-bluebutton-sdk)\n* [Python SDK](https://pypi.org/project/cms-bluebutton-sdk/)\n\n## Specifications\n\n* [Blue Button API Swagger Documentation](https://sandbox.bluebutton.cms.gov/docs/openapi)\n* [FHIR Specification](http://www.hl7.org/fhir/index.html)\n* [CARIN Implementation Guide ](http://www.hl7.org/fhir/us/carin-bb/)(Blue Button V2)\n* [OAuth 2.0 Specifications](https://oauth.net/specs/)\n\n## Version Resources\n\n* [Migrating to V2 FAQ](https://github.com/CMSgov/beneficiary-fhir-data/wiki/Migrating-to-V2-FAQ)\n* [Version specific extensions](https://www.hl7.org/fhir/versions.html#extensions) (in [JSON](https://hl7.org/fhir/R4/json.html))\n\n## CARIN Alliance\n\n* [CARIN Alliance](https://www.carinalliance.com/)\n* [CARIN Alliance Confluence Page](https://confluence.hl7.org/display/CAR)\n* [CARIN UX Guide](https://carinuxguide.arcwebtech.com/)\n* [CARIN Code of Conduct](https://www.carinalliance.com/our-work/trust-framework-and-code-of-conduct/)\n\n## Production Access\n\n* [Production Access Instructions](/developers/#production-api-access) \n* [Production Access User Guide](/guide/)\n* [Terms of Use](/terms/)\n\n## Tutorials and Learning Resources\n\n* [What is FHIR?](https://www.healthit.gov/sites/default/files/2019-08/ONCFHIRFSWhatIsFHIR.pdf)\n* [An Introduction to FHIR](https://www.youtube.com/watch?v=Px3564G-vw4)\n* [FHIR Training Calendar](https://www.hl7.org/training/calendar.cfm)\n* [FHIR Confluence Home Page](https://confluence.hl7.org/display/FHIR)\n* [OAuth Simplified](https://www.oauth.com/)\n* [FTC: Mobile Health App Interactive Tool](https://www.ftc.gov/business-guidance/resources/mobile-health-apps-interactive-tool)\n\n## Other CMS APIs\n\n* [Beneficiary Claims Data API (BCDA)](https://bcda.cms.gov/)\n* [Data at the Point of Care (DPC)](https://dpc.cms.gov/)\n* [Medicare Claims Data to Part D Sponsors (AB2D)](https://ab2d.cms.gov/)","src/content/pages/resources.mdx","359b48156a7a6c18","production-access",{"id":28,"data":30,"body":32,"filePath":33,"digest":34,"deferredRender":19},{"title":31,"description":15},"Production Access","We're pleased that you're considering applying for production access to the Blue Button 2.0 API. Our production access process and [Terms of Service](/terms/) are designed to ensure that Medicare enrollee data is kept secure, and that enrollees are given the information to make informed decisions when sharing their healthcare data with third-party applications.  \n\nThis guide includes:\n\n* An outline of the major steps in the Blue Button 2.0 API [production access process](#the-production-access-process)\n* Resources and guidelines for [developing your application](#application-development-resources-and-guidelines)\n* Requirements for your [privacy policy and terms of service](#your-privacy-policy-and-terms-of-service)\n* Information about [applying for production access and demoing your application](#production-access-request-and-demo) for the Blue Button 2.0 team\n\n## The production access process\n\nThe major steps you will take when developing your application and applying for Blue Button 2.0 API production access are as follows:  \n\n\u003CProcessList>\n  \u003CProcessListItem heading=\"Read the Blue Button 2.0 API Terms of Service\">\n    The [Blue Button 2.0 API Terms of Service](/terms/) include all official policies for production use of the API. It is essential that you read and understand the Terms of Service before developing your application and applying for production access.\n  \u003C/ProcessListItem>\n  \u003CProcessListItem heading=\"Develop your application in the Blue Button 2.0 developer sandbox\">\n    Refer to our [application development resources and guidelines](#application-development-resources-and-guidelines) for links to essential documentation and tips to help make sure that your app is ready for production approval.\n  \u003C/ProcessListItem>\n  \u003CProcessListItem heading=\"Draft your privacy policy and terms of service\">\n      [Eligible model entities](/index#eligible-model-entities) must have [production credentials](/production-access) to access their enrollees' claims data. \n  \u003C/ProcessListItem>\n  \u003CProcessListItem class=\"docs-final-item\" heading=\"Apply for production access and demo your application\">\n    When you are ready to apply for production approval for your application, send an email to [BlueButtonAPI@cms.hhs.gov](mailto:BlueButtonAPI@cms.hhs.gov). We'll respond with a form requesting basic information about your organization and application, then follow up to schedule your demo.\n    After your demo, and once any concerns with your application, privacy policy, and terms of service have been met, we will schedule the handoff of production credentials.\n    Please read about our [production access request and demo](#production-access-request-and-demo) process for complete information on applying and scheduling your demo.\n  \u003C/ProcessListItem>\n\u003C/ProcessList>\n\n\n## Application development resources and guidelines\n\nThese resources and guidelines will help you develop your application and make sure that the finished app is ready for production approval by the Blue Button 2.0 API team. \n\n### Documentation and other resources\n\nThe following resources are available for your use while developing your application:\n\n* The [Blue Button 2.0 developer sandbox](https://sandbox.bluebutton.cms.gov/) is a clone of the production API that provides synthetic sample data for 10,000 Medicare enrollees.\n* Our [developer documentation](https://bluebutton.cms.gov/developers/) provides all the technical information you will need to develop your application in the sandbox.\n* Get started exploring the API and making requests with the [sandbox test client](https://sandbox.bluebutton.cms.gov/testclient/), [Swagger documentation](https://sandbox.bluebutton.cms.gov/docs/openapi), and a pre-configured [Postman collection](/developers/#4-test-the-api-with-postman-or-curl).\n* Start building your app with our Node and Python [SDKs and sample apps](https://bluebutton.cms.gov/developers/#4-next-steps).\n* You can reach out to the Blue Button 2.0 team with any questions via the [Blue Button 2.0 API Google Group](https://groups.google.com/g/Developer-group-for-cms-blue-button-api) or by emailing [BlueButtonAPI@cms.hhs.gov](mailto:BlueButtonAPI@cms.hhs.gov).\n\n### User interface guidelines\n\n#### Presenting your privacy policy and terms of service\n\nYour application should present your privacy policy and terms of service in a way that is clearly accessible for the user. It should also allow the enrollee to actively opt in to the privacy policy and terms of service, instead of defaulting to agreement.\n\n#### Keeping the user informed\n\nYour privacy policy and terms of service are important for keeping enrollees informed about how their data will be used and shared. However, many users will click through and authorize access to their medical information without reading them completely. For this reason, your in-app messaging should also clearly describe how user data will be collected, used, and shared.\n\nFor example, If an enrollee's data is about to be shared, you could use a message, modal, or the general UI to clearly and concisely convey what is about to happen, why it is about to happen, and give the enrollee the ability to choose to move forward or not. Short contextual messages like this are far easier for users to digest and understand than the same information as presented in your privacy policy.\n\nCreate your application with this in mind: \"A Medicare enrollee should never be surprised to learn how their data is being used.\" Your application should always collect, use, and disclose health information in ways that are consistent with user expectation and consent.\n\n#### Giving the user control\n\nRemember that Medicare enrollees will be sharing very sensitive personally identifiable information (PII) and protected health information (PHI) with your application. Giving enrollees the ability to take action on information presented in the UI ensures that they have complete and thoughtful control over their healthcare data. Users should also be given opportunities to opt into or revoke service, request that their data be securely and completely deleted, or otherwise control access to and retention of their data.\n\n### Security and privacy\n\nWhile developing your application, please comply with all applicable laws and industry best practices to minimize the risk of unauthorized access, use, destruction, annotation, or disclosure of Medicare enrollees' PII and PHI. If applicable to your organization and/or use case, your application's handling of PII and PHI  must also be in compliance with HIPAA regulations.\n\n### Referring to Blue Button data\n\nIf your application allows connections to several data sources and users must search or pick from a list, please use \"Medicare\" as the name of the Blue Button 2.0 data source. Do not use \"Blue Button,\" \"CMS Blue Button,\" \"Medicare.gov,\" or any other terminology. \n\n---\n\n## Your privacy policy and terms of service\n\nWe require that organizations applying for production access to the Blue Button 2.0 API have the following documents publicly available for users to see and read:\n\n* Privacy policy\n* Terms of service\n\n**It is vital that these documents are easy for users to read and understand.** We understand that these are legal documents, but please keep your ultimate audience in mind when reviewing your privacy policy and terms of service. Medicare enrollees, like all people, need to know that they will be protected and want to know exactly how their data will be used. \n\n### Privacy policy\n\nYour privacy policy must clearly demonstrate to Medicare enrollees how you use, store, and potentially share their healthcare data. When you are applying for production access, you will need to attest that your privacy policy covers all of the requirements listed in the [Blue Button 2.0 API Terms of Service](/terms/), so be sure you have read it and checked your privacy policy against them. \n\n### Privacy policy checklist\n\nThe following checklist will help you make sure that your privacy policy is complete and ready for approval by the Blue Button 2.0 API team.  \n\nYour privacy policy should be:\n\n* Based on industry best practices\n* Prominent and publicly accessible\n* Easy to read, especially from the perspective of a Medicare enrollee. We encourage you to use readability checking software to estimate the reading level of your privacy policy.\n\nYour privacy policy should detail and address:\n\n* How your application collects and shares data:\n  * If and how data is shared\n  * What data is shared, and with whom\n  * If data is shared with third parties, whether that is on a one-time basis, or persistently collected\n  * If data is persistently collected, the time frame over which it is collected\n* Any use and sharing of de-identified, anonymized or pseudonymized data\n  * Some data, even if it has been anonymized, can still be used to identify people with specific medical conditions or other personal attributes. Your privacy policy should explain these risks, if applicable.\n* What happens to a user's data if they revoke access to retrieve it. Do you continue to retain and use data that was previously shared, or is it securely deleted?\n* Your application's policy regarding dormant or closed accounts\n* How you will notify users if your app's privacy policy is updated\n  * Notifications should tell the user what has changed and allow them to update their privacy settings or opt out of the service.\n* If third-party vendors that you work with commit to data protection requirements that are consistent with the law and your expectations, based on the sensitivity of the personal information they will receive from you or collect on your behalf\n* How you will notify users if you suffer a security or data breach, and if you will inform them of any steps they can take to protect their data in this event. The FTC's [Health Breach Notification Rule](https://www.ftc.gov/legal-library/browse/rules/health-breach-notification-rule) specifies requirements for notifying consumers following a breach involving personal health records.\n* How enrollees will be notified if your company is sold and the use of their data could change\n\n### Privacy notice\n\nIn addition to your privacy policy, you may also consider creating a separate, publicly hosted *privacy notice*. A privacy notice is an accurate, plain-language summary of the terms in your privacy policy. \n\nWe suggest using the Office of the National Coordinator for Health Information Technology (ONC)'s [Model Privacy Notice (MPN)](https://www.healthit.gov/topic/privacy-security-and-hipaa/model-privacy-notice-mpn) template when developing your privacy notice.\n\n### Terms of service\n\nYour terms of service may in no way contradict, negate, or detract from the protections detailed in your privacy policy.\n\n### Changes to your privacy policy and terms of service\n\nPrior to rolling out any changes to your privacy policy or terms of service, you must submit drafts of the new documents and draft notification to enrollees by emailing [BlueButtonAPI@cms.hhs.gov](mailto:BlueButtonAPI@cms.hhs.gov). The Blue Button 2.0 API team will review your documents and respond with feedback or approval within five business days. You may not roll out the new documents or notify enrollees of changes until you receive approval from CMS.\n\n---\n\n## Production access request and demo\n\n### Production access request\n\nWhen you are ready to apply for production access, send an email to [BlueButtonAPI@cms.hhs.gov](mailto:BlueButtonAPI@cms.hhs.gov). The team will reply with a link to the Blue Button 2.0 production access form. We typically respond to requests within 24 business hours.\n\nThe production access form will request your privacy policy and terms of service, along with some basic information about your organization and application:\n\n* The name of your organization\n* The name of your application\n* Your application's use case for Medicare enrollees\n* Your application's redirect URI\n* A point of contact for your organization\n\nFill out and submit the production access form, attaching PDF versions of your terms of service and privacy policy.\n\n### Application demo\n\nAfter you submit the production access form, we will follow up to schedule a 1-hour demo over Zoom. The demo meeting is an opportunity for you to showcase your application to the Blue Button 2.0 API team. \n\nYou should be prepared to demonstrate a substantially complete view of the journey enrollees take using your app, including these aspects: \n\n* User account creation \n* User authorization to share Medicare data\n* How the application displays enrollees' data\n* How enrollees' data is used \n* If applicable, how the app allows enrollees to share their data with others (e.g., providers or caregivers)\n\nYou should also be ready to discuss your privacy policy and terms of service, and any security-related questions or other concerns that the Blue Button 2.0 API team may have about your application.\n\nAfter the demo, the Blue Button 2.0 API team will review your application, privacy policy, and terms of service, and determine if you are ready for production access. We may follow up with you after the demo about concerns that must be addressed before issuing production credentials. In some cases, we may ask to schedule an additional demo.\n\n### Production credentials\n\nOnce you have met any concerns raised by the team and your application is approved, we will send you a link to the Blue Button 2.0 post-approval form. This form includes information about how you want your app listed in the [Medicare connected apps directory](https://www.medicare.gov/providers-services/claims-appeals-complaints/claims/share-your-medicare-claims/connected-apps). After you submit the post-approval form, we will schedule the handoff of production API credentials.","src/content/pages/production-access.mdx","42efb62d4676b981","support",{"id":35,"data":37,"body":39,"filePath":40,"digest":41,"deferredRender":19},{"title":38,"description":15},"Support","\u003CTwoColumn\n  image=\"/src/assets/images/discussion.svg?url\"\n  title=\"Join the Community\"\n  >\n    Get the latest updates from the Blue Button 2.0 API team and talk with fellow developers in the Google Developer Group for CMS Blue Button 2.0 API.\n  \n  \u003CButton link=\"https://groups.google.com/g/developer-group-for-cms-blue-button-api\">Join the Google Group\u003C/Button>\n\u003C/TwoColumn>\n\n\u003CTwoColumn\n  image=\"/src/assets/images/experts.svg?url\"\n  title=\"Contact Us\"\n  imageLast={true}\n>\n    To get help with questions specific to your integration or ask questions about the production API approval process, email [BlueButtonAPI@cms.hhs.gov](mailto:BlueButtonAPI@cms.hhs.gov). We respond to emails within 3 business days.\n\n\u003CButton link=\"mailto:BlueButtonAPI@cms.hhs.gov\">Email us\u003C/Button>\n\u003C/TwoColumn>","src/content/pages/support.mdx","ff4d5231fea7695d","use-cases",{"id":42,"data":44,"body":46,"filePath":47,"digest":48,"deferredRender":19},{"title":45,"description":15},"Use Cases","BB2.0 API data is valuable for any organization interested in innovating with claims data from over 64 million Medicare enrollees. The API serves a variety of use cases and we encourage you to explore ways to use BB2.0 API data to support Medicare enrollees in making healthcare decisions. \n\nExamples of current use cases include:\n\n\u003CIconList heading=\"Personal health data aggregators\">\n    Digital health applications can use BB2.0 to give Medicare enrollees a more comprehensive view of their health data. Access to personal health data can make Medicare enrollees more aware of their health conditions, helping them communicate more effectively with their providers. Research shows that thirty percent of  Medicare enrollees have 2 or 3 chronic conditions and see 5 or more physicians annually.\u003Ca href=\"#footnote-1\">\u003Csup>1\u003C/sup>\u003C/a> Helping Medicare enrollees gather their health information in one place makes it easier for them to coordinate care across providers and may minimize redundant procedures.\n\u003C/IconList>\n\n\u003CIconList heading=\"Insurance plan finders\">\n    BB2.0 API data can help filter insurance plan options based on a Medicare enrollee's specific health history and needs. Medicare enrollees can use insurance plan finder tools directly or Medicare brokers can use these tools to advise patients on the best plan options.\n\n    For example, with BB2.0 you can: \n\n    * Use claims and utilization data to make personalized recommendations for new plan options.\n    * Estimate prescription costs to optimize Medicare plan guidance.\n    * Check if a Medicare enrollee's current providers are in-network for various plan options.\n\u003C/IconList>\n\n\u003CIconList heading=\"Clinical research studies\">\n    Organizations conducting healthcare research and clinical trials often require participants to fill out long forms or regularly submit data over the course of the study. Medicare enrollees can authorize a research study to automatically pull their claims data with BB2.0, reducing the need for manual data entry.\n\u003C/IconList>\n\n\u003CIconList heading=\"Health record sharing\">\n    BB2.0 API can make it easy for Medicare enrollees to share their health data with doctors, pharmacies, caregivers, and others. \n\n    You can use BB2.0 to:\n\n    * Integrate BB2.0 data with Electronic Health Records (EHR) systems to import current health information.\n    * Allow patients to share health information like current medications, lab results, and medical imaging with providers.\n    * Give caregivers an accurate picture of a Medicare enrollee's health data to facilitate care coordination and communication with providers.\n\u003C/IconList>\n\nFor other examples of how applications use the Blue Button 2.0 API, visit the [Blue Button app directory on Medicare.gov](https://www.medicare.gov/providers-services/claims-appeals-complaints/claims/share-your-medicare-claims/connected-apps).\n\n\u003Cdiv class=\"margin-y-8\">\u003C/div>\n\n---\n\n \u003Ca id=\"footnote-1\">\u003C/a>\u003Csup>1\u003C/sup> Jama Health Forum, \"Addressing Challenges in Primary Care—Lessons to Guide Innovation\" [https://jamanetwork.com/journals/jama-health-forum/fullarticle/2795471](https://jamanetwork.com/journals/jama-health-forum/fullarticle/2795471), August 19, 2022","src/content/pages/use-cases.mdx","f222ae1d36b46da8","apiDocs",["Map",51,52,59,60,67,68,75,76,83,84,91,92,99,100],"authorization",{"id":51,"data":53,"body":56,"filePath":57,"digest":58,"deferredRender":19},{"title":54,"sortOrder":55},"Authorization",3,"The BB2.0 API uses the [OAuth 2 authorization flow](https://www.oauth.com/). To initiate an integration, you'll need the client ID and client secret for your application that were generated when you registered your application.\n\n## Web applications\n\nBB2.0 API supports the Authorization Code flow for web applications running on a server. Use the following settings when registering your application: \n\n- Client Type: Confidential\n- Grant Type: Authorization code\n\n### Proof Key for Code Exchange (PKCE) extension usage\n\nTo improve the security of your application, we require using the [Proof Key for Code Exchange (PKCE) extension](https://tools.ietf.org/html/rfc7636).\n\nThere are several reasons to use the PKCE extension:\n\n- Ensures that the application that started the OAuth 2.0 flow is the same one that is finishing it.\n- Mitigates the impact of a compromised Authorization Code by a malicious actor.\n- Follows the [OAuth 2.0 Security Best Current Practice](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-2.1.1)\n\nPKCE uses a code challenge that is derived from a code-verifier. The BB2.0 API supports the S256 style code challenge:\n\n`code_challenge = BASE64URL-ENCODE(SHA256(ASCII(codeverifier)))`\n\nWhen using PKCE, send the following additional parameters and values as part of the OAuth2.0 Authorization Request:\n\n- `code_challenge`\n- `code_challenge_method = \"S256\"`\n\nThese required parameters will be used in the examples in the following sections. To learn more about this flow, refer to [OAuth.com](https://www.oauth.com/).\n\n### User authorization\n\nTo allow a user to authorize your application, direct them to the BB2.0 API `/authorize` endpoint with the appropriate parameters. \n\nExample call:\n\n~~~\nhttps://sandbox.bluebutton.cms.gov/v2/o/authorize/?client_id=swBu7LWsCnIRfu530qnfPw1y5vMmER3lAM2L6rq2&redirect_uri=http://localhost:8080/testclient/callback&response_type=code&scope=openid%20profile%20patient%2FPatient.rs%20patient%2FCoverage.rs%20patient%2FExplanationOfBenefit.rs&state=8e896a59f0744a8e93bf2f1f13230be5&code_challenge=Ds-QWGn89NeT5jpmHLPA3z3oy59hOkbA03B1QS13_CY&code_challenge_method=S256\n~~~\n\nNote: The authorization in the example is started by an HTTP GET operation. For [SMART App Launch](https://build.fhir.org/ig/HL7/smart-app-launch/app-launch.html) compliance, POST style authorization is also supported.\n\n#### Parameters: Authorization code request\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">OAuth 2.0 Authorization Request Parameters\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Parameter\u003C/th>\n      \u003Cth scope=\"col\">Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>client_id\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        The \u003Ccode>client_id\u003C/code> from your registered application.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>lang\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Optional\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        Authorization screen language selection. Use \u003Ccode>en\u003C/code> for English or \u003Ccode>es\u003C/code> for Spanish.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>redirect_uri\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        The callback URL of your application. The user will be directed to this URL after authorizing your application.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>response_type\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        Supported response type: \u003Ccode>code\u003C/code>\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>scope\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Optional\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        A list of scopes being requested. Use URL encoding for special characters, including using an encoded space character (\u003Ccode>%20\u003C/code>) as a delimiter. See \u003Ca href=\"#scopes\">Scopes\u003C/a> for more details.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>state\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        A random string used to protect against request forgery attacks. The string shall have an entropy of at least 122 bits, and a randomly-generated UUID is preferred. If the state parameter is under 16 characters, an error will be returned.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>code_challenge\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        Required for PKCE. Value computed from a generated code verifier value using \u003Ccode>BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))\u003C/code>.\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\n        \u003Cp>\u003Cb>\u003Ccode>code_challenge_method\u003C/code>\u003C/b>\u003C/p>\n        \u003Cp>\u003Ci>Required\u003C/i>\u003C/p>\n      \u003C/td>\n      \u003Ctd>\n        Required for PKCE. Only \u003Ccode>S256\u003C/code> is supported. Any value other than \u003Ccode>S256\u003C/code> will return an error.\n      \u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n\n#### Authorization screen language selection\n\nThe BB2.0 user authorization screens are available in both English (the default)  and Spanish. Language selection for these screens works as follows:\n\n- To explicitly specify the language for the Blue Button 2.0 authorization screens, add the optional `lang` parameter to your `/authorize` request. Valid values are `en` (English) and `es` (Spanish).\n  - Example: `https://sandbox.bluebutton.cms.gov/v2/o/authorize/?lang=es`\n- If the `lang` parameter is omitted or is set to a value other than `en` or `es`, the API server will next check the `Accept-Language` HTTP header in the `/authorize` request. \n  - If the language settings in a user's web browser lists Spanish higher in the preference list than English, the browser will automatically include the correct `Accept-Language` value to request the Spanish-language screens. \n- If neither English or Spanish is requested via the `lang` parameter or `Accept-Language` header, the API server will default to the English version of the authorization screens.\n\n### Token endpoints\n\n- Sandbox: `https://sandbox.bluebutton.cms.gov/v2/o/token/`\n- Production: `https://api.bluebutton.cms.gov/v2/o/token/`\n\n\n### Exchange code for token\n\nIf the user authorizes your application, the BB2.0 API redirects back to the `redirect_uri` registered with your application with an authorization code and state parameter appended to it. \n\nFor example, if the Redirect URI is `http://localhost:8080/testclient/callback`, BB2.0 API will redirect with this request:\n\n`GET http://localhost:8080/testclient/callback?code=TSjqiZCdJwGyytGjz2GzziPfHTJ6z2&state=8e896a59f0744a8e93bf2f1f13230`\n\nYour application can now exchange the code provided in the redirected request for an access token. \n\nTo retrieve an access token, POST to the BB2.0 /token endpoint providing the code with the following parameters: \n\n- `client_id`\n- `client_secret`\n- `redirect_uri`\n- `grant_type`: `authorization_code` \n- `code`\n- `code_verifier`\n\n#### cURL command\n\n~~~\ncurl -X POST \"https://sandbox.bluebutton.cms.gov/v2/o/token/\" \\\n-u \"\u003Cclient_id>:\u003Cclient_secret>\" \\\n-d \"code=TSjqiZCdJwGyytGjz2GzziPfHTJ6z2&grant_type=authorization_code&redirect_uri=http://localhost:8080/testclient/callback&\nscope=profile patient/Patient.rs patient/ExplanationOfBenefit.rs patient/Coverage.rs&\ncode_verifier=zlGzSLRQz6HrTpd3TvEraYoVPW2cknzu4tUk6wHaPFw\"\n~~~\n\n#### Token response\n\n~~~\n{\n    \"access_token\": \"oQlduHNr09GKCU506GOgp8OarrAy2q\",\n    \"expires_in\": 16768.523842,\n    \"token_type\": \"Bearer\",\n    \"scope\": \"profile patient/Patient.rs patient/ExplanationOfBenefit.rs patient/Coverage.rs\",\n    \"refresh_token\": \"wDimPGoA8vwXP51kie71vpsy9l17HN\",\n    \"access_grant_expiration\": \"2025-09-05 19:17:53Z\"\n}\n~~~\n\nApplications in the \"10 hours\" access category do not receive a refresh token in the BB2.0 token response.\n\nNote that for applications in the \"10 hours\" or \"13 months\" access expiration categories, the response includes the `access_grant_expiration` date for that user.\n\n### Exchange refresh token for new access token\n\nAccess tokens expire after 10 hours. You can't use an expired access token to access data. To access data after an access token expires, request a new access token using a refresh token. Refresh tokens are available to applications in the \"13 months\" and \"Research\" access duration categories.\n\nYou can use a refresh token at any time in your application's workflow, even before an access token expires.\n\nTo retrieve a new refresh token, POST to the BB2.0 API `/token` endpoint with the following parameters:\n\n- `client_id`\n- `client_secret`\n- `grant_type`: `refresh_token`\n- `refresh_token`\n\n#### cURL command\n\n~~~\ncurl -X POST \"https://sandbox.bluebutton.cms.gov/v2/o/token/\" \\\n-u \"\u003Cclient_id>:\u003Cclient_secret>\" \\\n-d \"grant_type=refresh_token&refresh_token=wDimPGoA8vwXP51kie71vpsy9l17HN\"\n~~~\n\n#### Token response \n\n(successful with 200 status code):\n\n~~~\n{\n    \"access_token\": \"VD1VaT4IfjXAMlZTS9E4RVXZlkhYG7\",\n    \"expires_in\": 36000,\n    \"token_type\": \"Bearer\",\n    \"scope\": \"profile patient/Patient.rs patient/Coverage.rs patient/ExplanationOfBenefit.rs\",\n    \"refresh_token\": \"7x0VkRQlRU4fRNCQL2vh239nIyucgw\",\n    \"patient\": \"-20140000000001\",\n    \"access_grant_expiration\": \"2025-09-05 19:17:53Z\"\n}\n~~~\n\n### Revoking tokens\n\nDevelopers can revoke an enrollee’s previously granted access. To invalidate the ability to generate new access tokens without authorization, developers can revoke an access token and the underlying data access grant. \n\nTo revoke an access token, POST to the BB2.0 API `/revoke` endpoint with the following parameters:\n\n- `client_id`\n- `client_secret`\n- `token`\n\n#### cURL command\n\n~~~\ncurl -X POST --url 'https://bluebutton.cms.gov/v2/o/revoke/' \\\n--header 'content-type: application/x-www-form-urlencoded' \\\n-u \u003Cclient_id>:\u003Cclient_secret> \\\n-d 'token=oQlduHNr09GKCU506GOgp8OarrAy2q'\n~~~\n\n#### Response\n\nValid requests to the `/revoke` endpoint will always result in a 200 response, regardless of whether or not the requested token exists.  \n\n### Common token endpoint errors\n\n#### Reused refresh token\n\nA refresh token can only be used one time. The following is an example of an error response when attempting to reuse a refresh token:\n\nResponse (unsuccessful with 400 status code):\n\n~~~\n{\n    \"error\": \"invalid_grant\"\n}\n~~~\n\nIf you receive this error, verify that your refresh token sent the correct value.  If it's already been used, the user should be directed to re-authorize following the original authorization flow above.\n\n#### Client credentials or permissions problems\n\nIf your request has any issues with client credentials or permissions, the following response will be received:\n\nResponse (unsuccessful with 401 status code):\n\n~~~\n{\n    \"error\": \"invalid_client\"\n}\n~~~\n\nIf you receive this message, double-check that the request looks correct. If everything looks correct, email [bluebuttonapi@cms.hhs.gov](mailto:bluebuttonapi@cms.hhs.gov), and the Blue Button 2.0 API team can help troubleshoot.\n\n#### Expired Data Access Grant\n\nIf your authorization for accessing user data has expired, the corresponding access token will not be refreshed. Attempts to refresh the token will result in the following error message:\n\nResponse (unsuccessful with 400 status code):\n\n~~~\n{\n    \"status_code\": 400,\n    \"error\": \"invalid_grant\",\n    \"error_description\": \"The authorization for accessing user data has expired. To refresh Medicare data, the end user must re-authenticate and consent to data sharing.\"\n}\n~~~\n\nFor information on re-authorizing, see [user authorization](#user-authorization).\n\n### Expire authenticated user for sandbox testing\n\nFor testing in our sandbox, you can use the `/expire_authenticated_user` endpoint that expires the authorization granted by a patient user.\n\n`/expire_authenticated_user` can be used to test your code for the following conditions that produce the same error responses via the API:\n\n- When an access token expires, without needing to wait for the expiration in 10 hours\n- When a patient revokes access to your application\n- When access granted to a patient's data has expired\n\nPOST to the BB2.0 API `/expire_authenticated_user` endpoint with the following parameters:\n\n- `client_id`\n- `client_secret`\n- patient ID (patient ID \"-20140000000001\" is used in the cURL example below)\n\n#### cURL command\n\n~~~\ncurl -X POST \"https://sandbox.bluebutton.cms.gov/v2/o/expire_authenticated_user/-20140000000001/\" \\\n-u \"\u003Cclient_id>:\u003Cclient_secret>\" \\\n-H \"Content-Length: 0\"\n~~~\n\n#### Response \n\nSuccessful with 200 status code:\n\n~~~\nsuccess\n~~~\n\n#### Common error responses\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">Common error responses\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Error Code\u003C/th>\n      \u003Cth scope=\"col\">Response\u003C/th>\n      \u003Cth scope=\"col\">Reason\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>404\u003C/td>\n      \u003Ctd>\u003Ccode>Data Access Grant was Not Found\u003C/code>\u003C/td>\n      \u003Ctd>Patient ID has not granted access\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>403\u003C/td>\n      \u003Ctd>\u003Ccode>FORBIDDEN\u003C/code>\u003C/td>\n      \u003Ctd>Issues with client credentials or permissions\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n## Native & mobile applications\n\nThe Blue Button API supports the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749) using the [authorization code grant](https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1) with a [confidential client](https://www.rfc-editor.org/rfc/rfc6749#section-2.1) type flow. To optimize the security of Medicare enrollees' data during authentication, we do not support the implicit grant or public client types.\n\nFor best practices for the type of application you're developing, review the [OAuth 2.0 for Native Apps](https://www.rfc-editor.org/rfc/rfc8252.txt).\n\nTo mitigate security risks, use a proxy middleware server following a Backend For Frontend (BFF) authentication pattern. In the BFF pattern, a backend server performs all authorization code and refresh token exchanges. For examples of this type of proxy middleware client/server implementation, check out our sample applications available in [Node](https://github.com/CMSgov/bluebutton-sample-client-nodejs-react) or [Python](https://github.com/CMSgov/bluebutton-sample-client-python-react).\n\n## Scopes\n\nScopes define the API endpoints that your application is allowed to access. The BB2.0 API uses [HL7 FHIR Scopes](https://hl7.org/fhir/smart-app-launch/scopes-and-launch-context.html) to manage access to Medicare enrollee data. \n\n### BB2.0 API HL7 FHIR \n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">HL7 FHIR scopes and permissions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Scope\u003C/th>\n      \u003Cth scope=\"col\">Permission\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>patient/Patient.rs\u003C/code> \u003Cbr/>or \u003Cbr/>\u003Ccode>patient/Patient.read\u003C/code>\u003C/td>\n      \u003Ctd>Read and search my general patient and demographic information\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>patient/Coverage.rs\u003C/code> \u003Cbr/>or \u003Cbr/>\u003Ccode>patient/Coverage.read\u003C/code>\u003C/td>\n      \u003Ctd>Read and search my Medicare and supplemental coverage information\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>patient/\u003Cbr/>ExplanationOfBenefit.rs\u003C/code> \u003Cbr/>or \u003Cbr/>\u003Ccode>patient/\u003Cbr/>ExplanationOfBenefit.read\u003C/code>\u003C/td>\n      \u003Ctd>Read and search my Medicare claim information\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>launch/patient\u003C/code>\u003C/td>\n      \u003Ctd>Patient launch context\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>openid\u003C/code>\u003C/td>\n      \u003Ctd>Retrieve information about the current logged-in user\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>profile\u003C/code>\u003C/td>\n      \u003Ctd>Access the \u003Ccode>/UserInfo\u003C/code> endpoint (from the \u003Ca href=\"https://openid.net/connect/\">OpenID Connect specification\u003C/a>)\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n### Medicare enrollee personal information guidelines\n\nThere are 2 scenarios that block your application's access to the `/Patient` and `/Userinfo` endpoints:\n\n1. You choose not to collect Medicare enrollee personal information when your application is approved in production.\n2. A Medicare enrollee does not give your application permission to access their personal information. In the Medicare.gov authentication process, Medicare enrollees always have the option to block access to their personal data. \n\nIf you can't access the `/Patient` or `/Userinfo` endpoint, you can get the resource ID for a patient by pulling it during the initial authorization response or from the `ExplanationOfBenefit` or `Coverage` bundles.\n\nSuppose your application requires information limited by a scope and you can't get the information in another endpoint. In that case, you can explain why certain data is needed within your application before the user goes through the Medicare.gov authentication process. For example, if you use demographic information to help users autofill forms, explain in your UI that allowing access to their personal data will make it easier and faster to fill out required forms. However, if a user shares that data with you for one-time data entry, be clear about how long you keep the information and if it is used for any other purposes in your Privacy Policy and/or Terms of Service documents.\n\n### Revoked access\n\nAn enrollee can revoke access to your application in the 'My Connected Apps' section of their Medicare.gov account. This results in an invalid token for that user. If a Medicare enrollee revokes access to their data, be sure to account for that use case in your application's UI so it's easy for a Medicare enrollee to understand what's happening with their Medicare data.","src/content/api-docs/authorization.mdx","75540d695474ed3a","consuming-the-data",{"id":59,"data":61,"body":64,"filePath":65,"digest":66,"deferredRender":19},{"title":62,"sortOrder":63},"Consuming the data",4,"The Blue Button API includes over 1300 data elements with a wide variety of data exchange use cases. Here are some basics to get you started with common data elements. \n\nFor complete implementation guidance, see the [FHIR specification](http://www.hl7.org/fhir/index.html) and the [CARIN implementation guide](http://www.hl7.org/fhir/us/carin-bb/index.html). Our [Resources page](/resources/) also includes links to tutorials and helpful information on FHIR.\n\n## Understanding the payload\n\nBlue Button API [search operations](http://www.hl7.org/fhir/http.html#search) (like `/Patient`, `/ExplanationOfBenefit`, and `/ExplanationOfBenefit?patient=123`)  return data in [FHIR Bundles](http://www.hl7.org/fhir/bundle.html). A FHIR bundle is a container resource that includes a collection of FHIR resources. You can grab each resource by looping through the `Bundle.entry` list attribute.  \n\n[Read calls](http://www.hl7.org/fhir/http.html#read) such as `/Patient/123` return a single resource.\n\nFHIR `Bundle` example:\n\n~~~\n{\n    \"resourceType\": \"Bundle\",\n    \"id\": \"123\",\n    ....\n    ....\n    \"type\": \"searchset\",\n    \"total\": 99,\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\": \"ExplanationOfBenefit\",\n                \"id\": \"carrier--123\",\n                ....\n            }\n        }\n        {\n            \"resource\": {\n                \"resourceType\": \"ExplanationOfBenefit\",\n                \"id\": \"carrier--456\",\n                ....\n            }\n        }  \n    ]\n}\n~~~\n\n## Navigating through a bundle\n\nFHIR search results are paginated because they typically contain many records. The default is 10 records in each call. You can override the default of 10 with a _count parameter in the request. The maximum records allowed is 50.\n\nTo navigate forward and backward through the bundle, use the URLs provided in `Bundle.link`, as described in the table below. For instance, to get the next `X` records, use the URL supplied in `Bundle.link` where `relation = next`.  \n\n \u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n     \u003Ccaption class=\"usa-sr-only\">Relations for navigating through a bundle\u003C/caption>\n     \u003Cthead>\n         \u003Ctr>\n             \u003Cth scope=\"col\">Relation\u003C/th>\n             \u003Cth scope=\"col\">Description\u003C/th>\n         \u003C/tr>\n     \u003C/thead>\n     \u003Ctbody>\n         \u003Ctr>\n             \u003Ctd>first\u003C/td>\n             \u003Ctd>Retrieve the first X records in the resultset\u003C/td>\n         \u003C/tr>\n         \u003Ctr>\n             \u003Ctd>next\u003C/td>\n             \u003Ctd>Retrieve the next X records in the resultset\u003C/td>\n         \u003C/tr>\n         \u003Ctr>\n             \u003Ctd>previous\u003C/td>\n             \u003Ctd>Retrieve the previous X records in the resultset\u003C/td>\n         \u003C/tr>\n         \u003Ctr>\n             \u003Ctd>last\u003C/td>\n             \u003Ctd>Retrieve the last X records in the resultset\u003C/td>\n         \u003C/tr>\n     \u003C/tbody>\n \u003C/table>\n\nIn the example below, the `Bundle.total` attribute shows that there are 89 records in the results. However, only the first 10 records are delivered in the `Bundle.entry` array. \n\nFor more information on Bundles and FHIR search results, see [FHIR v4.3.0 Bundle](http://www.hl7.org/fhir/bundle.html) and [FHIR v4.3.0 Managing Returned Resources](http://www.hl7.org/fhir/search.html#return). \n\nBundle navigation example:\n\n~~~\n\"resourceType\": \"Bundle\",\n    \"id\": \"5e5844c4-d3e2-44ca-8c87-77efccc5d60d\",\n    ...\n    ...\n    \"total\": 89,\n    \"link\": [\n        {\n            \"relation\": \"first\",\n            \"url\": \"{host}/v2/fhir/ExplanationOfBenefit?startIndex=0&_count=10&patient=......\n        },\n        {\n            \"relation\": \"next\",\n            \"url\": \"{host}/v2/fhir/ExplanationOfBenefit?startIndex=10&_count=10&patient=......\n        },\n        {\n            \"relation\": \"last\",\n            \"url\": \"{host}/v2/fhir/ExplanationOfBenefit?&startIndex=.....\n        },\n        {\n            \"relation\": \"self\",\n            \"url\": \"{host}/v2/fhir/ExplanationOfBenefit?&startIndex=.....\n         }\n    ],\n~~~\n\n## Working with identifiers\n\nIn FHIR, the difference between the `Resource.id` (resource ID) and `identifier` attributes within a resource can be confusing. \n\n- **Resource ID:** In the Blue Button API, the resource ID is an internal identifier from the source database, the Chronic Conditions Warehouse (CCW).  The resource ID is a system-level resource, held outside the resource.  The Resource ID is guaranteed to be unique for a particular resource and will always be limited to one value.\n\n- **Identifier:** The identifier attribute typically provides business identifiers (or externally recognized identifiers).  In the Blue Button API, the `Patient.identifier` attribute provides the [Medicare Beneficiary ID (MBI)](https://www.cms.gov/medicare/new-medicare-card). The MBI is the number on an enrollee's Medicare card.\n\nIn FHIR, the identifier attribute is a list element that could supply multiple identifiers. Use [discriminators](https://www.hl7.org/fhir/profiling.html#discriminator) to distinguish between the entries to pull your desired identifier.  \n\nFor example, you can use discriminators to pull the current MBI from a Patient resource. (Enrollees are sometimes given new or replacement MBIs in situations such as identity theft.) In the `Patient` resource snippet below, there are two identifiers in the list. Use the following discriminators to pull the current MBI: \n- `identifier.system` = `http://hl7.org/fhir/sid/us-mbi` (ensures that the entry is an MBI)\n- `identifier.type.coding[n].extension.valueCoding.code` = \"current\"\n\nPatient identifier example:\n\n~~~\n\"identifier\": [\n        {\n            \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n            \"type\": {\n                \"coding\": [\n                    {\n                        \"code\": \"MC\",\n                        \"extension\": [\n                            {\n                                \"url\": \"https://bluebutton.cms.gov/resources/codesystem/identifier-currency\",\n                                \"valueCoding\": {\n                                    \"code\": \"current\",\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"value\": \"\u003CCURRENT MBI HERE>\"\n        },\n        {\n            \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n            \"type\": {\n                \"coding\": [\n                    {\n                        \"code\": \"MC\",\n                        \"extension\": [\n                            {\n                                \"url\": \"https://bluebutton.cms.gov/resources/codesystem/identifier-currency\",\n                                \"valueCoding\": {\n                                    \"code\": \"historic\",\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"value\": \"\u003CHISTORIC MBI HERE>\"\n        }\n    ],\n~~~\n\nExample [FHIRPath expression](https://hl7.org/fhir/fhirpath.html)  for pulling the current MBI:\n\n~~~\nPatient.identifier.where(type.coding.extension('https://bluebutton.cms.gov/\nresources/codesystem/identifier-currency').valueCoding.code =\n'current').where(system = 'http://hl7.org/fhir/sid/us-mbi').value\n~~~\n\n## Working with references\n\nThe Blue Button API uses both [literal](http://www.hl7.org/fhir/references.html#literal) and [logical](http://www.hl7.org/fhir/references.html#logical) FHIR references to refer to other resources/data external to the resource.\n\n### Literal references\n\nFor literal references, relative URLs are provided.  In the sample EOB resource below, the `Eob.patient` attribute contains a relative URL reference, `/Patient/123`. Append this path to the base FHIR URL to perform a Patient read operation. \n\nLiteral reference example:\n\n~~~\n\"resource\": {\n    \"resourceType\": \"ExplanationOfBenefit\",\n    \"id\": \"carrier--10045426206\",\n    ....\n    ....\n    \"patient\": {\n        \"reference\": \"Patient/123\"\n    },\n~~~\n\n### Contained resources\n\nThe Blue Button API also uses fragments and [contained resources](https://www.hl7.org/fhir/references.html#contained).  A resource that does not have independent existence is embedded inside another resource as a contained resource.  For example, the Organization resource does not have its own endpoint. Instead, it is supplied as a contained resource with EOB. In the example EOB resource below, the organization resource is within the `Eob.contained` attribute, and the `Eob.provider` attribute has a `#` reference to `contained.id` (`#provider-org`).   \n\nContained resource example:\n\n~~~\n\"contained\": [\n    {\n        \"active\": true,\n        \"id\": \"provider-org\",\n        \"identifier\": [\n            {\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"code\": \"PRN\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\"\n....\n....           \n....\n\"provider\": {\n    \"reference\": \"#provider-org\"\n},\n~~~\n\n### Logical references\n\n[Logical references](http://www.hl7.org/fhir/references.html#logical) typically supply a business identifier instead of a URL to an endpoint or contained resource.  \n\nIn the example below, the `Eob.careTeam.provider` attribute contains a reference to the the [National Provider Identifier (NPI)](https://npiregistry.cms.hhs.gov/) for the practitioner.  (Note: The Blue Button API  does not support a `/Practitioner` endpoint.)\n\nLogical reference example:\n\n~~~\n\"careTeam\": [\n        {\n            \"provider\": {\n                \"identifier\": {\n                    \"type\": {\n                        \"coding\": [\n                            {\n                                \"code\": \"npi\",\n                                \"display\": \"National Provider Identifier\",\n                                \"system\": \"http://hl7.org/fhir/us/carin-bb/CodeSystem/C4BBIdentifierType\"\n                            }\n                        ]\n                    },\n                    \"value\": \"123\"\n                }\n            },\n~~~\n\n## Extensions and SupportingInfo\n\nThe Blue Button API supplies many data points using [FHIR extensions](http://www.hl7.org/fhir/extensibility.html).  Extensions are information that is not part of the basic definition of the FHIR resource. They're often very specific to a use case or situation.  For example, the Blue Button API uses extensions to supply Medicare-specific data points that are not part of the standard FHIR specification. \n\nAll Blue Button API resources include extensions.  Extensions are like a key-value list, where the extension URL is the key. In an extension, the value attribute is defined as [Choice of Types](http://www.hl7.org/fhir/formats.html#choice), where the data type depends on the definition of the extension.    \n\nIn the example below, there are two extensions: \n- [NCH Near Line Record Identification Code](/resources/variables/nch_near_line_rec_ident_cd/) provides the value as a `valueCoding` type\n- [Carrier or MAC Number](/resources/variables/carr_num/)   is a `valueIdentifier`\n\n*Note: In the Blue Button API, the extension URL points at an underlying valueset rather than the standard FHIR practice of the URL pointing to the [StructureDefinition](http://www.hl7.org/fhir/structuredefinition.html) of the extension.  This is due to historical reasons and will be revisited in future versions of Blue Button.*\n\nExtension example:\n\n~~~\n\"extension\": [\n    {\n        \"url\": \"https://bluebutton.cms.gov/resources/variables/nch_near_line_rec_ident_cd\",\n        \"valueCoding\": {\n            \"code\": \"O\",\n            \"display\": \"Part B physician/supplier claim record (processed by local carriers; can include DMEPOS services)\",\n            \"system\": \"https://bluebutton.cms.gov/resources/variables/nch_near_line_rec_ident_cd\"\n        }\n    },\n    {\n        \"url\": \"https://bluebutton.cms.gov/resources/variables/carr_num\",\n        \"valueIdentifier\": {\n            \"system\": \"https://bluebutton.cms.gov/resources/variables/carr_num\",\n            \"value\": \"15202\"\n        }\n    }\n~~~\n\n### SupportingInfo attribute\n\nThe `supportingInfo` attribute is a standard element in the FHIR EOB resource. Similar to extensions, `suportingInfo` is like a key-value list. `supportingInfo.category` serves as the key and `supportingInfo.code` is the value.   Other attributes in `supportingInfo` include `timing[x]`, `value[x]`, and `reason`.  \n\n*Note: The [CARIN Implementation Guide](http://www.hl7.org/fhir/us/carin-bb/index.html) has chosen to use `supportingInfo` over extensions.  The CARIN IG does not define any extensions.  For historical and backwards compatibility reasons, the Blue Button API provides data in both extensions and `supportingInfo`.*\n\n## Determining claim type\n\nThe Blue Button API supplies claims data in the [ExplanationOfBenefit resource](http://www.hl7.org/fhir/explanationofbenefit.html) for all claim types (Example: Inpatient, Outpatient, Carrier, DME, etc.)\n\nTo determine the type of a given claim, inspect the `Eob.type` attribute.  `Eob.type` is a `CodeableConcept`, which provides data as a list of codings. There are multiple entries in the list. \n\nEach entry is a code from a given codesystem or valueset with information about the type of claim.  For example, the `NCH_CLM_TYPE_CD` codesystem uses the code `71` for a carrier claim. The Blue Button API `eob-type` valueset uses a code of `CARRIER` for a carrier claim.  \n\nClaim type example:\n\n~~~\n\"type\": {\n    \"coding\": [\n        {\n            \"code\": \"71\",\n            \"display\": \"Local carrier non-durable medical equipment, prosthetics, orthotics, and supplies (DMEPOS) claim\",\n            \"system\": \"https://bluebutton.cms.gov/resources/variables/nch_clm_type_cd\"\n        },\n        {\n            \"code\": \"CARRIER\",\n            \"system\": \"https://bluebutton.cms.gov/resources/codesystem/eob-type\"\n        },\n        .....\n        .....\n    ]\n},\n~~~\n\nFor more information about determining claim types, see the following coding system reference links:\n- [EOB type](/resources/codesystem/eob-type/)\n- [NCH Claim Type Code variable](/resources/variables/nch_clm_type_cd/)\n- [FHIR Claim Type value set](http://hl7.org/fhir/STU3/valueset-claim-type.html)\n\n## Linking items\n\nThe `item` data element in the EOB resource supplies a list of entries describing products/services provided.  You can link each entry in the list to other parts of the EOB using the `item.*sequence elements`.  \n\nFor example, `Eob.item.diagnosisSequence` links to `Eob.diagnosis.sequence`, which tells you that this product/service is linked to the corresponding diagnosis.  In the partial EOB example below, the `item` is linked to diagnosis `1` and careTeam member `3`.\n\nLinking item example:\n\n~~~\n\"item\": [\n    {\n        \"adjudication\": [\n        ....\n        ....\n        \"diagnosisSequence\": [\n            1\n        ],\n        \"careTeamSequence\": [\n            3\n        ],\n        ....\n        ....\n    }\n]\n \n\"diagnosis\": [\n    {\n        \"sequence\": 1,\n        \"diagnosisCodeableConcept\": {\n            \"coding\": [\n                {\n                    \"code\": \"Z0000\",\n                    \"display\": \"ENCNTR FOR GENERAL ADULT MEDICAL EXAM W/O ABNORMAL FINDINGS\",\n        ....\n        ....\n    },\n     \n\"careTeam\": [\n        {\n            \"sequence\": 1\n            ....\n            ....\n        },\n        {\n            \"sequence\": 2\n            ....\n            ....\n        },\n        {\n        {\n            \"sequence\": 3,\n            \"provider\": {\n                \"identifier\": {\n                ....\n                ....\n            },\n            \"role\": {\n                \"coding\": [\n                    {\n                        \"code\": \"performing\",\n                        \"display\": \"Performing provider\",\n            ....\n            ....       \n~~~","src/content/api-docs/consuming-the-data.mdx","40ac718521076ce8","developer-sandbox",{"id":67,"data":69,"body":72,"filePath":73,"digest":74,"deferredRender":19},{"title":70,"sortOrder":71},"How to Access Sandbox Data",2,"To get started integrating with the Blue Button 2.0 API, you'll need to register a sandbox application. You don't need a working application at this point, but you need to define basic settings to generate client credentials for testing purposes.   \n\n## 1\\. Register an application in the developer sandbox\n\n1. Go to the [Sandbox Dashboard](https://sandbox.bluebutton.cms.gov/home). (If you don't already have an account, create one.)\n2. Click [Add an Application](https://sandbox.bluebutton.cms.gov/v2/o/applications/register/).\n\n## 2\\. Enter application details\n\nWhen you add or edit a sandbox application, you'll enter various required configuration details.\n\n\u003Cimg class=\"padding-top-4\" style=\"width: 100%;\" src=\"/src/assets/images/register-new-application.png\" alt=\"New application registration screen\" />\n\n### Application Name\n\nThe name of your sandbox application. \n\n### OAuth Client Type\n\nThe Blue Button 2.0 API only supports confidential client type. \n\n### Authorization Grant Type \n\nThe Blue Button 2.0 API only supports the authorization code grant type. An authorization code is a random string generated by the authorization server and returned to the application as part of the authorization response.\n\n### Callback URLs / Redirect URIs \n\nThis is an API endpoint on your system that receives the callback after a user successfully authorizes your application to access their Medicare data. To enter multiple URIs in the **Callback URLs / Redirect URIs** field, separate each entry with a space or new line.   \n\nSample format: `URIscheme://[sub-domain.]domain_name[:port]/path`\n\n### Does my application need to collect enrollee demographic data?\n\nThis setting determines 2 things:\n\n* What [scopes](#scopes) are applied to your application (determines which API calls your application can execute).\n* The information and options displayed on the authorization screen Medicare enrollees use to allow or deny your application access to their data.\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-4\">\n  \u003Ccaption class=\"usa-sr-only\">Demographic data settings\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Setting\u003C/th>\n      \u003Cth scope=\"col\">Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Cth scope=\"row\">Yes\u003C/th>\n      \u003Ctd>\n        \u003Cp>Allows your application to request access to a Medicare enrollee’s claims data AND personal information such as name, date of birth, race, and sex. (Scopes: \u003Ccode>patient/Patient.rs, patient/Coverage.rs, patient/ExplanationOfBenefit.rs, profile\u003C/code>)\u003C/p>\n        \u003Cp>Note: When an enrollee is authorizing your application, they will have the ability to omit the patient/Patient.rs scope. Be sure that you build your application accordingly to handle a 403 error if an enrollee decides to filter their demographic information.\u003C/p>\n        \u003Cimg class=\"padding-top-4\" style=\"width: 100%;\" src=\"/src/assets/images/demographic-info-yes.png\" alt=\"Authorization screen with demographic info option\" />\n      \u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth scope=\"row\">No\u003C/th>\n      \u003Ctd>\n        \u003Cp>Allows your application to request access to the \u003Ccode>patient/Coverage.rs and patient/ExplanationOfBenefit.rs\u003C/code> scopes.\u003C/p>\n        \u003Cimg class=\"padding-top-4\" style=\"width: 100%;\" src=\"/src/assets/images/demographic-info-no.png\" alt=\"Authorization screen without demographic info option\" />\n      \u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\nTo learn more about scopes and permissions, visit [Authorization](#authorization).\n\n## 3\\. Save your application\n\nClick **Save Application**.  \n\nAfter you register your sandbox application, you'll get a Client ID and Client Secret.\n\n* Client ID: an alphanumeric string used to identify your application. Use this in your code when you call the Blue Button 2.0 API.\n* Client Secret: an alphanumeric string used by your application to authenticate with the Blue Button server.  \n\nNote: Client credentials from the developer sandbox only work in the sandbox environment. To get production credentials, you need to complete the [production access requirements](#production-api-access) and be approved.  \n\n## 4\\. Test the API with Postman or cURL\n\nOnce you've created a Blue Button 2.0 sandbox application, you can start making requests. The instructions in this section will get you up and running quickly with Postman or cURL.\n\n### Postman\n\n[Postman](https://www.postman.com/) is a widely used API client. To start making Blue Button 2.0 API sandbox calls in Postman, follow the steps shown below.  \n\n\n1. Configure your Sandbox application to work with Postman:\n    - Log into the [Blue Button 2.0 Sandbox](https://sandbox.bluebutton.cms.gov/).\n    - Click **View/Edit App** for the app you want to use with Postman.\n    \u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-02.png\" alt=\"View/Edit App link\" />\n    - Click **Edit Application**.\n    \u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-03.png\" alt=\"Edit Application button\" />\n    - Enter the following URLs into the **Callback URLs / Redirect URIs** field, separated by a carriage return.\n        - `https://oauth.pstmn.io/v1/callback`\n        - `https://oauth.pstmn.io/v1/browser-callback`\n        \u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-04.png\" alt=\"Callback URLs / Redirect URIs field, populated with callback URLs listed text\" />\n    - Click **Save Application**.\n    \u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-05.png\" alt=\"Save Application button\" />\n\n2. Download the \u003Ca href=\"/assets/developer-resources/CMS-BlueButton-2.0-API-Sandbox.postman_collection.json\" download>Blue Button 2.0 API Sandbox Postman collection\u003C/a> and import it into the Postman desktop or web application. \n    - To import the collection, either click the **Import** button in Postman and select the collection file, or drag the file into the Postman window. \n\n3. Select the top-level folder in the collection, **CMS BlueButton 2.0 API Sandbox**.\n\n4. Select the **Variables** tab.\n\n5. Copy your application's **Client ID** and **Client Secret** from your Sandbox account into both the **Initial Value** and **Current Value** cells for the corresponding Postman variables, `clientId` and `clientSecret`.\n\n6. After copying and pasting your API credentials, log out of the Blue Button sandbox in your browser. Being logged into the sandbox can cause errors during authorization in Postman.\n\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-12.png\" alt=\"Sandbox Logout button\" />\n\n7. In Postman, select the **Authorization** tab.\n\n8. Click **Get New Access Token**.\n\n9. A Medicare.gov login window will open. Enter the username and password for a [synthetic sandbox user account](#authenticating-as-a-synthetic-user) (e.g., user = \"BBUser00000\" and password = \"PW00000!\"), and click **Log in**.\n\u003Cimg src=\"/src/assets/images/bb-postman-10.png\" alt=\"Medicare login window\" />\n\n10. Click **Connect**.\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-11.png\" alt=\"Connect button\" />\n\n11. When the **Manage Access Tokens** window appears, click **Use Token**. You may also give your token a name.\n\n12. Make any desired Blue Button 2.0 API calls from the endpoints listed under the **Patient**, **Explanation of Benefit**, and **Coverage** folders. For example, to retrieve explanation of benefits information for the authenticated patient:\n    - Select the **Explanation of Benefits** folder, then **GET Search Explanation of Benefits**.\n    - Click **Send**.\n    - The API will return a FHIR bundle with explanation of benefits information.\n\n### cURL\n\nYou can also call the  Blue Button 2.0 sandbox with [cURL](https://curl.se/), a popular command-line HTTP client.\n\nFirst, obtain an access token. To test using your sandbox application, you can use [Postman](#postman) to retrieve a token with your client ID and secret, as shown in the previous section. Alternately, you can get a sample authorization token from the Blue Button 2.0 Test Client as shown in the following steps:  \n\n1. Navigate to the [Blue Button 2.0 API Test Client](https://sandbox.bluebutton.cms.gov/testclient/).\n\n2. If you are currently logged into the Blue Button 2.0 sandbox, click **Log Out to Continue**.\n\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-06.png\" alt=\"Log Out to Continue button\" />\n\n3. Click **Get a Sample Authorization Token**.\n\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-07.png\" alt=\"Get a Sample Authorization button\" />\n\n4. Click **Authorize as a Beneficiary**.\n\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-08.png\" alt=\"Authorize as a Beneficiary button\" />\n\n5. A Medicare login screen will open. Enter the username and password for a [synthetic sandbox user account](#authenticating-as-a-synthetic-user) (e.g., user = `BBUser00000` and password = `PW00000!`), and click **Log in**.\n\u003Cimg src=\"/src/assets/images/bb-postman-10.png\" alt=\"Medicare login window\" />\n\n6. Click **Connect**.\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-11.png\" alt=\"Connect button\" />\n\n7. A new page will open. Copy the access token from the JSON shown under **Step 1: Sample Authorization** for use in your cURL command.\n\u003Cimg style=\"width: 100%;\" src=\"/src/assets/images/bb-postman-09.png\" alt=\"JSON object with access token highlighted\" />\n\nOnce you have an access token, you can start making API calls with cURL. For example, the following command will retrieve explanation of benefit information for the authenticated patient (replace `\u003CYOUR ACCESS TOKEN>` with your actual access token):  \n\n\n`curl --location \"https://sandbox.bluebutton.cms.gov/v2/fhir/ExplanationOfBenefit/\" --header \"Accept: application/json\" --header \"Authorization: Bearer \u003CYOUR ACCESS TOKEN>\"\n`\n\n## 5\\. Next steps\n\nIf you're ready to start building, check out our Sample Applications or SDKs:\n\n### SDKs\n\nOur SDKs provide a comprehensive set of tools to help you build applications faster and in a more standardized way. The SDKs are available for Node and Python.  \n\n* [Node SDK](https://www.npmjs.com/package/cms-bluebutton-sdk)\n* [Python SDK](https://pypi.org/project/cms-bluebutton-sdk/)\n\n### Sample Apps\n\nOur sample applications provide examples of basic use of the BB2.0 API.  \n\n* [Node & React](https://github.com/CMSgov/bluebutton-sample-client-nodejs-react)\n* [Python & React](https://github.com/CMSgov/bluebutton-sample-client-python-react)","src/content/api-docs/developer-sandbox.mdx","9d3ca6a3370f40dc","implementation-guides",{"id":75,"data":77,"body":80,"filePath":81,"digest":82,"deferredRender":19},{"title":78,"sortOrder":79},"Implementation guides",7,"## HL7 FHIR Common Payer Consumer Data Set (CPCDS)\n\n[Implementation Guide: Version 1.0.0, Date 2020-11-23](http://hl7.org/fhir/us/carin-bb/)\n\nThis IG describes the CARIN Alliance Blue Button 2.0 Framework and Common Payer Consumer Data Set (CPCDS), providing a set of resources that payers can exchange with third-parties to display to consumers via a FHIR-based API. This IG will help Medicare, Medicaid, CHIP, BHP standard health plans, and QHP issuers on the FFEs share adjudicated claims and encounter data via the Patient Access API discussed in section II.A. of this proposed rule. It includes data elements and coding instructions each impacted payer can use to prepare and share the specified data.\n\n## HL7 FHIR CARIN - v2 Artifacts Summary\n\n[Implementation Guide: Version 1.0.0, Date 2020-11-23](https://build.fhir.org/ig/HL7/carin-bb/artifacts.html#4)\n\nThe purpose of this IG is to outline the different artifacts released by CARIN for v2. The artifacts contain code explanations and benefits for the different EOB Profiles.\n\n## HL7 FHIR CARIN – BlueButton GitHub IG\n \n[Github Version 0.1.13, Date 2020-11-23\n](https://github.com/HL7/carin-bb/) \n\nThis implementation guide describes the CARIN Blue Button® Framework and Common Payer Consumer Data Set (CPCDS), providing a set of resources that payers can display to consumers via a FHIR API.","src/content/api-docs/implementation-guides.mdx","897c7dff3cc2e1a4","explore-the-api",{"id":83,"data":85,"body":88,"filePath":89,"digest":90,"deferredRender":19},{"title":86,"sortOrder":87},"Explore the API",1,"## Test client\n\nThe Blue Button 2.0 API test client is a quick, no-code-required way to explore data returned from our API endpoints.\n\nBefore you begin: If you're logged in to the sandbox, log out to use the test client.  \n\n1. Go to the [Blue Button 2.0 API test client](https://sandbox.bluebutton.cms.gov/testclient/).\n2. Choose a sample authorization token option. Click **Authorize as a Beneficiary** or **Authorize as a Beneficiary (Spanish)**.\n3. Log in to Medicare.gov using a [synthetic user's account credentials](#authenticating-as-a-synthetic-user).\n4. Click **Connect**.  \n\nOnce you're logged in as a Medicare enrollee, you'll get an access token and you can make calls to different endpoints and see the sample data that is delivered in the response.\n\n## Sample data\n\nIf you want to see a sample of the data available in the Blue Button 2.0 API without authenticating a synthetic user or creating a sandbox account, you can download a sample file. This [zip folder of JSON files](/assets/zip/bb_sample_data_bbuser29999.zip) contains synthetic data for a single Medicare enrollee. The download includes 3 FHIR resources in JSON format:\n\n1. A single [Patient](http://www.hl7.org/fhir/patient.html) resource\n2. A [FHIR bundle](http://www.hl7.org/fhir/bundle.html) containing multiple [ExplanationOfBenefit](http://www.hl7.org/fhir/explanationofbenefit.html) resources (EOB)\n3. A [FHIR bundle](http://www.hl7.org/fhir/bundle.html) containing multiple [Coverage](http://www.hl7.org/fhir/coverage.html) resources\n\nTo learn more about Blue Button 2.0 API data, refer to [Understanding the Data](#understanding-the-data).","src/content/api-docs/explore-the-api.mdx","3c7ee60664680537","calling-the-api",{"id":91,"data":93,"body":96,"filePath":97,"digest":98,"deferredRender":19},{"title":94,"sortOrder":95},"Calling the API",5,"This section provides information on basic and common queries against the Blue Button API.  For a complete listing of Blue Button API calls, see our [Swagger documentation](https://sandbox.bluebutton.cms.gov/docs/openapi).\n\n## Sandbox vs. Production Environments\n\n### Sandbox\n\n- Available to everyone via test credentials\n- Contains test claims data\n- Base FHIR URL: `https://sandbox.bluebutton.cms.gov/v2/fhir/`\n\n### Production\n\n- Must [complete the steps]() for production credentials\n- Contains real Medicare enrollee data\n- Base FHIR URL: `https://api.bluebutton.cms.gov/v2/fhir/`\n\nTo find enrollees with varying volumes and types of data, use this [CSV of synthetic data](/synthetic_users_by_claim_count_full.csv). Using the synthetic data, you can break down claims by type (carrier, inpatient, etc.) for each enrollee/user combination.  Synthetic data works in both the Sandbox and Production environments.\n\n## Querying Resources\n\nA listing of common API calls are shown in the table below.  See \"Base FHIR URLs\" above and substitute for  as appropriate.  \n    \nFor a complete listing of Blue Button API calls, see our [Swagger documentation](https://sandbox.bluebutton.cms.gov/docs/openapi).  \n\n### Patient Resource\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-8\">\n  \u003Ccaption class=\"usa-sr-only\">Patient resource requests and descriptions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth>Request\u003C/th>\n      \u003Cth>Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}/Patient\u003C/code>\u003C/td>\n      \u003Ctd>Returns a \u003Ca href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\">bundle\u003C/a> of \u003Ca href=\"https://www.hl7.org/fhir/patient.html\" target=\"_blank\">Patient resources\u003C/a> with one entry (one patient resource).  You can use the resource ID \u003Ccode>Bundle.entry.resource.id\u003C/code>in later queries.  For synthetic data, the ID is a negative number.\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}/Patient/\\{id}\u003C/code>\u003C/td>\n      \u003Ctd>Returns a single Patient resource.  Replace \u003Ccode>\\{id}\u003C/code> with a valid patient resource ID.  See \u003Ccode>/Patient\u003C/code> call above.\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n### Coverage Resource\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-8\">\n  \u003Ccaption class=\"usa-sr-only\">Coverage resource requests and descriptions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth>Request\u003C/th>\n      \u003Cth>Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}/Coverage\u003C/code>\u003C/td>\n      \u003Ctd>Returns a \u003Ca href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\">bundle\u003C/a> of \u003Ca href=\"https://www.hl7.org/fhir/coverage.html\" target=\"_blank\">Coverage resources\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}/Coverage?beneficiary=\\{id}\u003C/code>\u003C/td>\n      \u003Ctd>Replace \u003Ccode>\\{id}\u003C/code> with the patient resource ID.  Returns a \u003Ca href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\">bundle\u003C/a> of \u003Ca href=\"https://www.hl7.org/fhir/coverage.html\" target=\"_blank\">Coverage resources\u003C/a>\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n### Explanation of Benefit Resource\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-8\">\n  \u003Ccaption class=\"usa-sr-only\">Explanation of Benefit Resource requests and descriptions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth>Request\u003C/th>\n      \u003Cth>Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}\u003Cbr/>/ExplanationOfBenefit\u003C/code>\u003C/td>\n      \u003Ctd>Returns a \u003Ca href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\">bundle\u003C/a> of \u003Ca href=\"https://www.hl7.org/fhir/explanationofbenefit.html\" target=\"_blank\">Explanation of Benefit resources\u003C/a>.  The bundle should contain one or more EOBs. You can use the resource ID located at \u003Ccode>Bundle.entry.resource.id\u003C/code> (the explanation of benefit resource ID) in later queries.  For synthetic data, the ID is typically formatted as \u003Ccode>[claimtype]\u003C/code>–\u003Ccode>[number]\u003C/code> Example: \u003Ccode>carrier--10114937820\u003C/code>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}\u003Cbr/>/ExplanationOfBenefit?patient=\\{id}\u003C/code>\u003C/td>\n      \u003Ctd>Replace \u003Ccode>\\{id}\u003C/code> with patient resource ID. Returns a \u003Ca href=\"https://www.hl7.org/fhir/bundle.html\" target=\"_blank\">bundle\u003C/a> of \u003Ca href=\"https://www.hl7.org/fhir/explanationofbenefit.html\" target=\"_blank\">Explanation of Benefit resources\u003C/a>.  The bundle should contain one or more EOBs. You can use the resource ID located at \u003Ccode>Bundle.entry.resource.id\u003C/code> (the explanation of benefit resource ID) in later queries.  For synthetic data, the ID is typically formatted as \u003Ccode>[claimtype]\u003C/code>–\u003Ccode>[number]\u003C/code> Example: \u003Ccode>carrier--10114937820\u003C/code>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}\u003Cbr/>/ExplanationOfBenefit/\\{id}\u003C/code>\u003C/td>\n      \u003Ctd>Returns a single \u003Ca href=\"https://www.hl7.org/fhir/explanationofbenefit.html\" target=\"_blank\">Explanation of Benefit resources\u003C/a>.  Replace \\{id} with a valid EOB resource ID.  See \u003Ccode>/ExplanationOfBenefit\u003C/code> call above.\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n### Capability Statement Resource\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-8\">\n  \u003Ccaption class=\"usa-sr-only\">Capability Statement resource requests and descriptions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth>Request\u003C/th>\n      \u003Cth>Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{baseURL}/metadata\u003C/code>\u003C/td>\n      \u003Ctd>Returns the \u003Ca href=\"https://www.hl7.org/fhir/capabilitystatement.html\" target=\"_blank\">FHIR capability statement\u003C/a> (Example: the FHIR features and operations supported by this server)\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\n### User Info Resource\n\n\u003Ctable class=\"usa-table usa-table--borderless usa-table--stacked margin-bottom-8\">\n  \u003Ccaption class=\"usa-sr-only\">User Info resource requests and descriptions\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth>Request\u003C/th>\n      \u003Cth>Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>\u003Ccode>HTTP GET \\{host}/\\{version}\u003Cbr/>/connect/userinfo\u003C/code>\u003C/td>\n      \u003Ctd>If the user grants access to access to their personal information, \u003Ccode>UserInfo\u003C/code> returns name, family name and email. If the user denies access to their personal information, \u003Ccode>UserInfo\u003C/code> returns \u003Ccode>You do not have permission.\u003C/code>\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>","src/content/api-docs/calling-the-api.mdx","5db335aa446768f7","optimizing-your-app",{"id":99,"data":101,"body":104,"filePath":105,"digest":106,"deferredRender":19},{"title":102,"sortOrder":103},"Optimizing your application",6,"## Compress resources for more efficient data transfers  \n\nTurn on compression to improve performance when transferring large data resources. Gzip compression is turned off by default. Compression can be activated for the following content types:  \n\n- `text/html`\n- `text/plain`\n- `application/json`\n- `application/fhir+json`  \n\nTo activate compression add the following to the header:  \n\n`Accept-Encoding: gzip`  \n\nThe minimum payload size we will gzip is 1 kilobyte. Check for the `Content-Encoding: gzip` response header before trying to decompress.  \n\n## Query by type\n\nEOB resources fall into 8 types. If you only need specific types of data, the query by type feature allows you to request claims by claim type. By default, the FHIR API returns all of these claim types when requesting the EOB for an individual Medicare enrollee.  \n\n### EOB Claim types and parameters\n\n\u003Ctable class=\"usa-table usa-table--borderless\">\n  \u003Ccaption class=\"usa-sr-only\">EOB Claim types and parameters\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">Claim Type\u003C/th>\n      \u003Cth scope=\"col\">Type Parameter\u003Cbr />(case-sensitive)\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Ctd>Carrier\u003C/td>\n      \u003Ctd>carrier\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Durable Medical Equipment\u003C/td>\n      \u003Ctd>dme\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Home Health Agency\u003C/td>\n      \u003Ctd>hha\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Hospice\u003C/td>\n      \u003Ctd>hospice\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Inpatient\u003C/td>\n      \u003Ctd>inpatient\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Outpatient\u003C/td>\n      \u003Ctd>outpatient\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Skilled Nursing Facility\u003C/td>\n      \u003Ctd>snf\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Ctd>Prescription Drug Event\u003C/td>\n      \u003Ctd>pde\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>\n\nUse the query parameter to request a specific claim type. \n\n~~~\nExample: ?type=pde\n~~~\n\nTo request multiple claim types, use a comma-separated list of values for the TYPE parameter. If multiple codes are specified, EOBs matching all of those claim types will be returned.   \n\nExample:  \n\n~~~\n/ExplanationOfBenefit?patient=123&type=carrier,dme,hha,hospice,inpatient,outpatient,snf  \n~~~\n\n### Claim type errors\n\nIf you submit an invalid combination of claim types or use the wrong case you'll get an error response with a status code of `400 Bad Request`.\n\n## Query by \"lastUpdated\" Field  \n\nThe HL7 FHIR specification provides a Meta section in each resource. The `lastUpdated` field represents the date and time of the last update and is supplied with a FHIR instant datatype  \n\n~~~\nYYYY-MM-DDThh:mm:ss.sss+zz:zz.  \n~~~\n\nThe HL7 FHIR specification also provides a `_lastUpdated query` parameter for the search operations on the endpoints. By using the `_lastUpdated` query parameter, you can request records that have changed before or after a specific date. If you keep track of the date of a previous request, you can request just the changes since your previous request. The format of this request would be:  \n\n~~~\n/Patient?_id=-20000000001112&_lastUpdated=gt2020-02-13T08:00:00-05:00  \n~~~\n\nDo not use dates before 2020-02-12 with the `_lastUpdated parameter`. \n\nThe Blue Button API supports operators for less than (lt), greater than (gt), less than or equal (le), and greater than or equal (ge) the specified instant. You can also specify a time interval by using two `_lastUpdated parameters` like this:  \n\n~~~\n/ExplanationOfBenefit?patient=Patient/-20000000001112&_lastUpdated=gt2020-02-13T08:00:00-05:00&_lastUpdated=lt2020-02-14T08:00:00-05:00\n~~~","src/content/api-docs/optimizing-your-app.mdx","58ccbe56fcc37fab",["Map",108,109,115,116,122,123,129,130,136,137,143,144,150,151,157,158,164,165,171,172,178,179,185,186,192,193,199,200],"codesystem/adjudication",{"id":108,"data":110,"body":112,"filePath":113,"digest":114,"deferredRender":19},{"title":111},"Adjudication","# Code System: Adjudication\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/adjudication`\n\n## Description\nThis code system includes a selection of Adjudication Value Codes which convey the payers assessment of the item provided in the claim under the terms of the patient's insurance coverage.\n\nEach code in the system is itself a URL providing additional information about that code. (Example:`https://bluebutton.cms.gov/resources/variables/line_nch_pmt_amt/`).\n\nNote that adjudications typically have two codings. The first coding comes from the CARIN C4BB IG specified code system\n(`https://terminology.hl7.org/5.1.0/CodeSystem-adjudication.html`). The code system described here is supplied as a second coding, providing more granular detail about the adjudication and backwards compatibility with older versions.","src/content/resources/codesystem/adjudication.mdx","0c1f3549803ed7ca","codesystem/benefit-balance",{"id":115,"data":117,"body":119,"filePath":120,"digest":121,"deferredRender":19},{"title":118},"Benefit Balance Coding","# Code System: Benefit Balance\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/benefit-balance`\n\n## Description\nThis code system includes a selection of codes which convey information about the claim balance by benefit category.\nEach code in the system is itself a URL providing additional information about that code. (Example: `https://bluebutton.cms.gov/resources/variables/nch_profnl_cmpnt_chrg_amt/`).","src/content/resources/codesystem/benefit-balance.mdx","57e6c091838ccc51","codesystem/eob-type",{"id":122,"data":124,"body":126,"filePath":127,"digest":128,"deferredRender":19},{"title":125},"EOB Type Coding","# Coding System: EOB Type\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/eob-type`\n\n**Appears In:** \u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/explanationofbenefit-definitions.html#ExplanationOfBenefit.type\">ExplanationOfBenefit.type\u003C/a>\u003C/code>\n\nThis FHIR \u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/datatypes.html#coding\">Coding\u003C/a>.system\u003C/code> value is used for the `Coding`s that best identifies the claim/event for each `ExplanationOfBenefit` (EOB) resource. Such `ExplanationOfBenefit.type` `Coding`s will be present for all `ExplanationOfBenefit` resources returned by the API.\n\nThe `ExplanationOfBenefit.type` field will contain multiple `Coding`s, based on the type of claim/event that the EOB represents. At the moment, only the BBAPI-specific `eob-type` `Coding` is guaranteed to be present for every EOB, and so it's the one that API authors are recommended to make the most use of. This is particularly critical since the data/fields available in the EOBs vary dramatically for each `eob-type`. For example, API users should not expect that the fields present in a \"`CARRIER`\" EOB will also be present in an \"`HHA`\" EOB; **the data schema for each claim/event type is quite different!**\n\n## Values\n\nThe following table lists all of the claim/event EOB types, along with how they're mapped for each of the possible `ExplanationOfBenefit.type` `Coding`s.\n\n\u003Ctable class=\"ds-c-table\">\n  \u003Ccaption>ExplanationOfBenefit.type Coding Values\u003C/caption>\n  \u003Cthead>\n    \u003Ctr>\n      \u003Cth scope=\"col\">BBAPI\u003Cbr />\u003Ccode>\u003Ca href=\"https://bluebutton.cms.gov/resources/codesystem/eob-type\">eob-type\u003C/a>\u003C/code>\u003C/th>\n      \u003Cth scope=\"col\">FHIR\u003Cbr />\u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/valueset-claim-type.html\">ex-claimtype\u003C/a>\u003C/code>\u003C/th>\n      \u003Cth scope=\"col\">Medicare\u003Cbr />\u003Ccode>\u003Ca href=\"https://bluebutton.cms.gov/resources/variables/nch_clm_type_cd\">nch_clm_type_cd\u003C/a>\u003C/code>\u003C/th>\n      \u003Cth scope=\"col\">Medicare\u003Cbr />\u003Ccode>\u003Ca href=\"https://bluebutton.cms.gov/resources/variables/nch_near_line_rec_ident_cd\">nch_near_line_rec_ident_cd\u003C/a>\u003C/code>\u003C/th>\n      \u003Cth scope=\"col\">Description\u003C/th>\n    \u003C/tr>\n  \u003C/thead>\n  \u003Ctbody>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>CARRIER\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>professional\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>71\u003C/code> or \u003Ccode>72\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>O\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/what-medicare-covers/part-b/what-medicare-part-b-covers.html\">What Part B Covers\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>DME\u003C/code>\u003C/th>\n      \u003Ctd>\u003Cem>(no coding)\u003C/em>\u003C/td>\n      \u003Ctd>\u003Ccode>81\u003C/code> or \u003Ccode>82\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>M\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/coverage/durable-medical-equipment-dme-coverage\">What Part B Covers: Durable Medical Equipment\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>HHA\u003C/code>\u003C/th>\n      \u003Ctd>\u003Cem>(no coding)\u003C/em>\u003C/td>\n      \u003Ctd>\u003Ccode>10\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>U\u003C/code> or \u003Ccode>V\u003C/code> or \u003Ccode>W\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/coverage/home-health-services.html\">What Part A Covers: Home Health Services\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>HOSPICE\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>institutional\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>50\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>V\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/what-medicare-covers/part-a/part-a-coverage-hospice.html\">What Part A Covers: Hospice\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>INPATIENT\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>institutional\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>60\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>V\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/coverage/hospital-care-inpatient.html\">What Part A Covers: Inpatient Hospital Care\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>OUTPATIENT\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>professional\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>40\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>W\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/what-medicare-covers/part-b/what-medicare-part-b-covers.html\">What Part B Covers\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>PDE\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>pharmacy\u003C/code>\u003C/td>\n      \u003Ctd>\u003Cem>(no coding)\u003C/em>\u003C/td>\n      \u003Ctd>\u003Cem>(no coding)\u003C/em>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/drug-coverage-part-d\">What Drug Plans Cover\u003C/a>\u003C/td>\n    \u003C/tr>\n    \u003Ctr>\n      \u003Cth>\u003Ccode>SNF\u003C/code>\u003C/th>\n      \u003Ctd>\u003Ccode>institutional\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>20\u003C/code> or \u003Ccode>30\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ccode>V\u003C/code>\u003C/td>\n      \u003Ctd>\u003Ca href=\"https://www.medicare.gov/what-medicare-covers/part-a/part-a-coverage-skilled-nursing-facilities.html\">What Part A Covers: Skilled Nursing Facility Care\u003C/a>\u003C/td>\n    \u003C/tr>\n  \u003C/tbody>\n\u003C/table>","src/content/resources/codesystem/eob-type.mdx","1b187b579a47bf95","codesystem/diagnosis-type",{"id":129,"data":131,"body":133,"filePath":134,"digest":135,"deferredRender":19},{"title":132},"Diagnosis Type","# Coding System: Diagnosis Type\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/diagnosis-type`\n\n## Description\nThis variable provides the diagnosis type for the corresponding diagnosis code.\n\n## Values\nThis variable is coded, and will contain one of the following values.\n\n**Values for Codeset**:\n\n| Value     | Description                                                         |\n|-----------|---------------------------------------------------------------------|\n| admitting | A diagnosis code indicating the beneficiary's initial diagnosis at admission.                                |\n| primary   | A diagnosis code identifying the diagnosis, condition, problem, or other reason for the admission/encounter/visit shown in the medical record to be chiefly responsible for the services provided.        |\n| secondary | A diagnosis other than the primary diagnosis.|","src/content/resources/codesystem/diagnosis-type.mdx","47ef08d9a414bb0b","codesystem/hcpcs",{"id":136,"data":138,"body":140,"filePath":141,"digest":142,"deferredRender":19},{"title":139},"HCPCS Coding","# Coding System: HCPCS\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/hcpcs`\n\n**Appears In:**\n\n* \u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/explanationofbenefit-definitions.html#ExplanationOfBenefit.item.service\">ExplanationOfBenefit.item.service\u003C/a>\u003C/code>\n* \u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/explanationofbenefit-definitions.html#ExplanationOfBenefit.item.modifier\">ExplanationOfBenefit.item.modifier\u003C/a>\u003C/code>\n\nThis FHIR \u003Ccode>\u003Ca href=\"http://hl7.org/fhir/STU3/datatypes.html#coding\">Coding\u003C/a>.system\u003C/code> value is used for the `Coding`s that identify the procedures, supplies, products, and services for each `ExplanationOfBenefit.item` (EOB.item) in the PAI results. Such `Coding`s are used in all `ExplanationOfBenefit` resources returned by the API, excepting those for Part D events.\n\nThis `Coding` is simply a combination of these two variables, as received from the source Medicare records system:\n\n* `Coding.code`:\n    * For `ExplanationOfBenefit.item.service`: [HCPCS_CD](/resources/variables/hcpcs_cd)\n    * For `ExplanationOfBenefit.item.modifier`, one of:\n        * [HCPCS_1ST_MDFR_CD](/resources/variables/hcpcs_1st_mdfr_cd)\n        * [HCPCS_2ND_MDFR_CD](/resources/variables/hcpcs_2nd_mdfr_cd)\n        * [HCPCS_3RD_MDFR_CD](/resources/variables/hcpcs_3rd_mdfr_cd)\n        * [HCPCS_4TH_MDFR_CD](/resources/variables/hcpcs_4th_mdfr_cd)\n* `Coding.version`: [CARR_CLM_HCPCS_YR_CD](/resources/variables/carr_clm_hcpcs_yr_cd)\n    * Note: `Coding.version` is only available for some Carrier and DME claims. It is not available at all for other claim/event types.\n\n## Additional Information\n\nAs described on [HCPCS_CD](/resources/variables/hcpcs_cd), the HCPCS code set is a combination of different code sets that can be disambiguated based on their value format. See CMS' [HCPCS - General Information](https://www.cms.gov/Medicare/Coding/MedHCPCSGenInfo) for further information.","src/content/resources/codesystem/hcpcs.mdx","2edea3f1f8408d5d","identifier/mbi-hash",{"id":143,"data":145,"body":147,"filePath":148,"digest":149,"deferredRender":19},{"title":146},"Mbi Hash","# Code System: Mbi Hash\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/identifier/mbi-hash`\n\n## Description \n\nThe Medicare Beneficiary Identifier (MBI) is the new identification number that has replaced SSN-based health insurance claim numbers (HICNs) on all Medicare transactions, such as billing, claim submissions and appeals. The purpose of this randomly generated series of numbers and letters is to improve patient identity protection and prevent identity theft.\nThe MBI Hash provides security and privacy to protect the MBI during API calls.","src/content/resources/identifier/mbi-hash.mdx","516255ef0d79a6c0","codesystem/identifier-currency",{"id":150,"data":152,"body":154,"filePath":155,"digest":156,"deferredRender":19},{"title":153},"Identifier Currency","# Coding System: Identifier Currency\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/identifier-currency`\n\n## Description\nAn indicator as to whether or not the corresponding Medicare Beneficiary Identifier (MBI) is the most recent/current identifier assigned to the beneficiary, or if it is a former/historic identifier that is no longer used.\n\n## Values\nThis variable is coded, and will contain one of the following values.\n\n**Values for Codeset**:\n\n| Value     | Description                          |\n|-----------|--------------------------------------|\n| current   | The corresponding MBI is the most recent / current identifier assigned to the beneficiary. |\n| historic  | The corresponding MBI is a historic identifier that is no longer used. |","src/content/resources/codesystem/identifier-currency.mdx","e54539a4ab189003","codesystem/information",{"id":157,"data":159,"body":161,"filePath":162,"digest":163,"deferredRender":19},{"title":160},"Information","# Coding System: Information\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/codesystem/information`\n\n## Description\nA selection of codes that provide supporting information about the claim.\n\nEach code in the system is a URL. (Example: https://bluebutton.cms.gov/resources/variables/nch_wkly_proc_dt/)","src/content/resources/codesystem/information.mdx","9c032bfd9f0c2f8c","identifier/claim-group",{"id":164,"data":166,"body":168,"filePath":169,"digest":170,"deferredRender":19},{"title":167},"Claim Group","# System: Claim Group\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/identifier/claim-group`\n\n## Description\n\nProvides an identifier for grouping multiple iterations/revisions of a single claim.\n\nInstitutional claims are grouped as follows:\n1. Beneficiary MBI Number.\n2. Provider Number.\n3. Claim from due date.\n4. Claim through date. \n\n\nNon-Institutional claims are grouped as follows:\n1. Beneficiary MBI Number.\n2. Carrier claim control number.","src/content/resources/identifier/claim-group.mdx","86001282c8f5482b","identifier/hicn-hash",{"id":171,"data":173,"body":175,"filePath":176,"digest":177,"deferredRender":19},{"title":174},"Hicn Hash","# Code System: Hicn Hash\n\n## Usage\n\n**System URI**: `https://bluebutton.cms.gov/resources/identifier/hicn-hash`\n\n## Description\nPrior to the introduction of the Medicare beneficiary Identifier (MBI), the Health Insurance Claim Number (HICN) acted as the Medicare beneficiary's  identification number and was used for paying claims and for determining  eligibility for services across multiple entities (e.g. Social Security  Administration (SSA), Railroad Retirement Board (RRB), States, Medicare  providers and health plans, etc.)\n\nWith a few exceptions, the HICN is no longer used. See `https://www.cms.gov/medicare/new-medicare-card` for more details.","src/content/resources/identifier/hicn-hash.mdx","26c57b1f35af0173","variables/carr_clm_cntl_num",{"id":178,"data":180,"body":182,"filePath":183,"digest":184,"deferredRender":19},{"title":181},"CARR_CLM_CNTL_NUM","# Coding System: CARR_CLM_CNTL_NUM\n\n## Description\nThis field is an identification number for professional claims processed by the multi-carrier system (MCS). This field contains a numeric value that identifies a claim throughout the processing cycle and allows for a linkage between the claim and the beneficiary for whom it was submitted. This should be handled as a character field due to leading ‘0’s. This is a unique field created by MCS.\n\n## Other Info\n- **Short name:** CARR_CLM_CNTL_NUM\n- **Long name:** CARR_CLM_CNTL_NUM\n- **Type:** char\n- **Length:** 15\n- **Source:** CCW","src/content/resources/variables/carr_clm_cntl_num.mdx","4dbfa790e18b9ad4","variables/fi_orig_clm_cntl_num",{"id":185,"data":187,"body":189,"filePath":190,"digest":191,"deferredRender":19},{"title":188},"FI_ORIG_CLM_CNTL_NUM","# Coding System: FI_ORIG_CLM_CNTL_NUM\n\n## Description\nThis field represents the original intermediary control number (ICN) which is present on claims, representing the ICN of the original transaction now being adjusted. (Example: 373273882012) \n\n## Other Info\n- **Short name:** FI_ORIG_CLM_CNTL_NUM\n- **Long name:** FI_ORIG_CLM_CNTL_NUM\n- **Type:** char\n- **Length:** 23\n- **Source:** CWF","src/content/resources/variables/fi_orig_clm_cntl_num.mdx","24615c926c6450d5","variables/fi_doc_clm_cntl_num",{"id":192,"data":194,"body":196,"filePath":197,"digest":198,"deferredRender":19},{"title":195},"FI_DOC_CLM_CNTL_NUM","# Coding System: FI_DOC_CLM_CNTL_NUM\n\n## Description\nThis field is an identification value for institutional claims processed by the fiscal intermediary standard system (FISS). It provides a reference number for the control and monitoring of specific claims, and to differentiate between claims for the beneficiary. This is a unique field created by FISS.\n\n## Other Info\n- **Short name:** FI_DOC_CLM_CNTL_NUM\n- **Long name:** FI_DOC_CLM_CNTL_NUM\n- **Type:** char\n- **Length:** 23\n- **Source:** CCW","src/content/resources/variables/fi_doc_clm_cntl_num.mdx","9e1d4e7a185be7c1","variables/nch_clm_prvdr_pmt_amt",{"id":199,"data":201,"body":203,"filePath":204,"digest":205,"deferredRender":19},{"title":202},"NCH_CLM_PRVDR_PMT_AMT","# Coding System: NCH_CLM_PRVDR_PMT_AMT\n\n## Description\nThe NCH Claim Provider Payment Amount represents the total payments made to the provider for this claim (sum of line-item provider payments amounts variable called LINE_PRVDR_PMT_AMT).\n\n## Other Info\n- **Short name:** PROV_PMT\n- **Long name:** NCH_CLM_PRVDR_PMT_AMT\n- **Type:** Num\n- **Length:** 12\n- **Source:** NCH QA Process","src/content/resources/variables/nch_clm_prvdr_pmt_amt.mdx","f0cad9a73a64ff13","dataDocs",["Map",208,209],"understanding-the-data",{"id":208,"data":210,"body":212,"filePath":213,"digest":214,"deferredRender":19},{"title":211,"sortOrder":87},"Understanding the data","## Understanding the data\n\nThe BB2.0 database pulls data from the [CMS Chronic Conditions Warehouse (CCW)](https://www2.ccwdata.org/web/guest/home/), which contains Medicare Part A, B and D claims data going back to 2014\\. Over 600 fields from the CCW are mapped to FHIR. These fields are surfaced across the Patient, Coverage and Explanation of Benefits FHIR resources.\n\n### FHIR resources\n\nBlue Button 2.0 API data is supplied in three resources from the [FHIR standard](http://hl7.org/fhir/R4/):\n\n* [Explanation of Benefit](http://www.hl7.org/fhir/R4/explanationofbenefit.html) (EOB): Primary source of claims data. The EOB resource contains the lines within an episode of care, including where and when the service was performed, the diagnosis codes, the provider who performed the service, and the cost of care.\n* [Patient](http://hl7.org/fhir/R4/patient.html): Provides information about patients including demographic information and updates to their patient identifiers.\n* [Coverage](https://hl7.org/fhir/R4/coverage.html): Provides information about the enrollees' insurance coverage, including information about dual coverage.\n\n#### Explanation of Benefit\n\nThe Explanation of Benefit resource provides data for the following claim types:  \n\n* Inpatient (INPATIENT)\n* Outpatient (OUTPATIENT)\n* Skilled Nursing Facility Claims (SNF)\n* Hospice (HOSPICE)\n* Home Health Agency Claims (HHA)\n* Carrier (Professional)\n* Durable Medical Equipment (DME)\n* Prescription Drug Events - Part D (PDE)  \n\nRequest:\n~~~\nHTTP GET /v2/fhir/ExplanationOfBenefit/?patient=[fhir_id]  \n~~~\n\nThis request returns claims as [Explanation of Benefit Resources](https://hl7.org/fhir/R4/explanationofbenefit.html) inside a [FHIR Bundle](http://hl7.org/fhir/R4/bundle.html).   \n\nExample response excerpt:\n~~~\n{\n    \"total\":99,\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\":\"ExplanationOfBenefit\",\n                \"id\":\"carrier--10045426206\",\n                \"meta\":{\n                    \"lastUpdated\":\"2021-06-07T21:51:33.787-04:00\",\n                    \"profile\": [\n                        \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Professional-NonClinician\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"type\":{\n                            \"coding\": [\n                                {\n                                    \"system\":\"http://hl7.org/fhir/us/carin-bb/CodeSystem/C4BBIdentifierType\",\n                                    \"code\":\"uc\",\n                                    \"display\":\"UniqueClaimID\"\n                                }\n                            ]\n                        },\n                        \"system\":\"https://bluebutton.cms.gov/resources/variables/clm_id\",\n                        \"value\":\"-10045426206\"\n                    },\n~~~\n  \n\n\u003Ca href=\"/sample-eob-entry.json\" download>Download a sample EOB resource\u003C/a>\n\n#### Patient  \n\n~~~\nHTTP GET /v2/fhir/Patient/[fhir_id]  \n~~~\n\nThe above URL returns demographic and other administrative information as a [Patient FHIR Resource](http://hl7.org/fhir/R4/patient.html). This information is mostly demographic information, not medical data. Note that users can choose to allow or deny access to the /Patient endpoint in the Medicare.gov authorization flow. For more information, go to [Scopes](#scopes).  \n\nRequest:\n~~~\ncurl --header \"Authorization:Bearer AUTHORIZATION TOKEN\" \"https://sandbox.bluebutton.cms.gov/v2/fhir/Patient/-20140000008325\"`  \n~~~\n\nExample response excerpt:\n~~~\n{\n    \"resourceType\": \"Patient\",\n    \"id\": \"-20000000001112\",\n    \"meta\": {\n        \"lastUpdated\":\"2021-06-07T21:50:48.132-04:00\",\n        \"profile\": [\n            \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"type\":{\n                \"coding\": [\n                    {\n                        \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n                        \"code\":\"MC\",\n                        \"display\":\"Patient'sMedicarenumber\"\n                    }\n                ]\n            },\n            \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n            \"value\":\"2S00A00AA00\",\n            \"period\": {\n                \"start\":\"2020-01-01\"\n            }\n        }\n    ],\n    \"name\": [\n        {\n            \"use\":\"usual\",\n            \"family\":\"Doe\",\n            \"given\": [\n                \"John\",\n                \"X\"\n            ]\n        }\n    ],\n    \"gender\":\"male\",\n    \"birthDate\":\"1999-06-01\",\n    \"deceasedDateTime\":\"1981-03-17\",\n    \"address\": [\n        {\n            \"state\":\"07\",\n            \"postalCode\":\"99999\"\n        }\n    ]\n}\n\n~~~\n\n\u003Ca href=\"/sample-patient-entry.json\" download>Download a sample Patient FHIR Resource\u003C/a>  \n\n#### Coverage  \n~~~\nHTTP GET /v2/fhir/Coverage/?beneficiary=[fhir_id]  \n~~~\nThe above URL returns Coverage information as [Coverage resources](http://hl7.org/fhir/R4/coverage.html) inside a [FHIR Bundle](http://hl7.org/fhir/R4/bundle.html). One coverage resource is supplied for each coverage type.\n\nRequest: \n~~~\ncurl --header \"Authorization:Bearer AUTHORIZATION TOKEN\" \"https://sandbox.bluebutton.cms.gov/v2/fhir/Coverage/?beneficiary=-20140000008325\"`\n~~~\n\nResponse excerpt:\n~~~\n{\n    \"resourceType\":\"Bundle\",\n    \"id\":\"fb4bffd7-abb3-401f-96cd-d617c545092c\",\n    \"meta\":{\n        \"lastUpdated\":\"2022-02-14T17:27:56.303-05:00\"\n    },\n    \"type\":\"searchset\",\n    \"total\":4,\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\":\"Coverage\",\n                \"id\":\"part-a--20000000001112\",\n                \"meta\": {\n                    \"lastUpdated\":\"2021-06-07T21:50:48.132-04:00\",\n                    \"profile\": [\n                        \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Coverage\"\n                    ]\n                },\n                \"status\":\"active\",\n                \"type\":{\n                    \"coding\": [\n                        {\n                            \"system\":\"http://terminology.hl7.org/CodeSystem/v3-ActCode\",\n                            \"code\":\"SUBSIDIZ\"\n                        }\n                    ]\n                },\n                \"subscriberId\": \"2S00A00AA00\",\n                \"beneficiary\": {\n                    \"reference\":\"Patient/-20000000001112\"\n                },\n\n~~~\n\n  \n\u003Ca href=\"/sample-coverage-entry.json\" download>Download a sample Coverage FHIR Resource\u003C/a>  \n\n### UserInfo\n\nThe UserInfo endpoint is an OAuth 2.0 Protected Resource that returns information about an authenticated user.   \n\n\nNote that users can choose to allow or deny access to the UserInfo endpoint in the Medicare.gov authorization flow. For more information, go to [Scopes](#scopes).  \n\n  \n\n`HTTP GET /connect/userinfo`  \n\nThe above URL returns basic information about the user, given an authorization token. An HTTP GET is called and the response is returned as JSON.  \n\nRequest:\n~~~\ncurl --header \"Authorization: Bearer \u003CAUTHORIZATIONTOKEN\\>\" \"https://sandbox.bluebutton.cms.gov/v2/connect/userinfo\"`\n~~~\n\nExample response:\n~~~\n{\n    \"sub\": \"-123456789\",\n    \"prefered_username\": \"fflinstone\",\n    \"given_name\": \"Fred\",\n    \"family_name:, \"Flinstone,\n    \"name\": \"FredFlinstone\",\n    \"email\": \"pebbles-daddy@example.com\",\n    \"created\": \"2017-11-28\",\n    \"patient\": \"-123456789\",\n}\n~~~\n### Terminology and coding systems\n\nBB2.0 API supplies codified data using several different terminology and coding systems, defined by various standards bodies, along with locally defined CMS coding systems: \n\n* [ICD-10](https://www.cms.gov/Medicare/Coding/ICD10)\n* [HCPCS](https://www.cms.gov/Medicare/Coding/MedHCPCSGenInfo)\n* [CPT Codes](https://www.cms.gov/Medicare/Fraud-and-Abuse/PhysicianSelfReferral)\n* [National Drug Code Directory](https://www.fda.gov/drugs/drug-approvals-and-databases/national-drug-code-directory)\n* [CMS Claim Type](/resources/codesystem/eob-type/)  \n\nAdditional information about coding systems can be found on the [terminology page](http://www.hl7.org/fhir/us/carin-bb/artifacts.html#5) of the [CARIN Implementation Guide](http://www.hl7.org/fhir/us/carin-bb/index.html) and in the [Blue Button Code System Listing (CSV 77KB)](/assets/csv/bluebutton_system_listing.csv).  \n\nBB2.0 API also provides data in [FHIR Extensions](http://www.hl7.org/fhir/extensibility.html). FHIR extensions are custom data elements that are not found in the FHIR standard:\n\n* [Blue Button extensions in V2 (CSV 96KB)](/assets/csv/BB_V2_extension_listing.csv)\n\n### Refresh rate and rate limiting\n\nData from the CCW is pulled into the BB2.0 API database on a weekly basis. The weekly data pull may be delayed for maintenance or because of delayed delivery of claims to the CCW.  \n\nOur rate limit is high enough to accommodate the needs of anyone integrating with the BB2.0 API. The BB2.0 API is one of 4 CMS APIs that share the same data from the CCW. BB2.0 is for single data calls for an individual Medicare enrollee and the other 3 APIs are designed for bulk data calls. Because the rate limit is set based on the needs the bulk data APIs, the rate limit is higher than required for an application making single API calls using BB2.0\\.  \n\n### Synthetic data\n\nBecause access to real claims data is restricted in order to protect the privacy of Medicare enrollees, CMS created synthetic user accounts representing enrollment information and healthcare claims for 10,000 Medicare enrollees. Since synthetic data are realistic-but-not-real data, the typical privacy and security restrictions do not apply.  \n\nAlthough the synthetic user accounts are not tied to any real patient data, they mimic real claims data. For example, if a patient is prescribed the diabetes medication Metformin, the associated cost and date of this prescription will be realistic. However, the synthetic data set does not represent a longitudinal patient view or true clinical scenario. This allows you to test your integration with BB2.0 API, but could result in a patient with records for contradictory procedures. \n\n#### Working with synthetic user accounts\n\nBB2.0 API offers 10,000 synthetic user accounts for you to test with in both the sandbox and production environments:\n\n| User account ranges | Date updated | Description | \n| -------- |-----------------------------------------------------| -------- | \n| BBUser00000 to BBuser09999 | Rolling claims updated weekly. \u003Cbr/>\u003Cbr/>Loaded July 2023 | These accounts receive new claims data on a rolling basis.  These user accounts represent a range of Medicare demographics and ages, including people under 65 who qualify for Medicare for reasons other than age. |\n| BBUser10000 | Last Updated 2022 | BBUser10000 is a special synthetic user that provides nearly every field the API supports, including a variety of claim types. This makes it an excellent testing account for populating test scenarios. |\n\n\nTo differentiate between synthetic data and real patient production data, synthetic records have negative Patient ID and Explanation of Benefit values (example synthetic Patient ID: -10000010254618). Real Patient IDs will always have positive values.  \n\n#### Authenticating as a synthetic user\n\nEach of our 10,000 synthetic user accounts have Medicare.gov login credentials. To log in as a synthetic user, use the following username/password combination pattern when authorizing a test user with Blue Button 2.0:\n\n* Username: BBUserXXXXX (Example: BBUser00005)\n* Password: PWXXXXX! (Example: PW00005!)  \n\n#### Claim dates in rolling claims updates\n\nWhen new data is added for a synthetic user account in the weekly update, the new data includes claims dated 1-2 weeks prior. This delay simulates real claim processing time in production data. Get updated claims using the [\\_lastUpdated query parameter](#query-by-lastupdated-field).","src/content/data/understanding-the-data.mdx","d52a5d13a821dbc4"]